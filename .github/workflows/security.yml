name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > audit-results.json || true
        npm audit --audit-level=moderate

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: npm-audit-results
        path: audit-results.json
        retention-days: 30

    - name: Run secret scan
      run: npm run scan-secrets

    - name: Check for hardcoded secrets
      run: |
        # Check for common secret patterns, excluding known false positives
        # Exclude lines with: Mock, mock, example, placeholder, your_, { key:, label:, React keys, etc.
        if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
          -E "(password|secret|key|token)\s*[:=]\s*[\"'][^\"']+[\"']" src/ | \
          grep -v -E "(// Mock|// mock|// Example|example|placeholder|your_|YOUR_|{ key:|label:|value:|category:)" | \
          grep -v -E "(test|Test|TEST|dummy|Dummy|DUMMY|fake|Fake|FAKE|sample|Sample|SAMPLE)" | \
          grep -v -E "(console\.log|debug|Debug|DEBUG)" | \
          grep -v -E "(is_sensitive:|_key:|_secret:|_token:|_password:)" | \
          grep -v -E "(<[A-Za-z]+ key=|key=\"[^\"]+\"|key='[^']+'|key: '[^']+')" | \
          grep -E "."; then
          echo "❌ Potential hardcoded secrets found!"
          exit 1
        else
          echo "✅ No hardcoded secrets detected"
        fi

    - name: Dependency vulnerability check
      run: |
        # Check for high severity vulnerabilities
        if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
          echo "❌ High severity vulnerabilities found!"
          npm audit --audit-level=high
          exit 1
        else
          echo "✅ No high severity vulnerabilities"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for vulnerable dependencies
      run: |
        echo "🔍 Checking for vulnerable dependencies..."
        
        # Run npm audit and capture results
        npm audit --json > dependency-audit.json || true
        
        # Check for critical and high vulnerabilities
        CRITICAL=$(cat dependency-audit.json | jq '.metadata.vulnerabilities.critical // 0')
        HIGH=$(cat dependency-audit.json | jq '.metadata.vulnerabilities.high // 0')
        MODERATE=$(cat dependency-audit.json | jq '.metadata.vulnerabilities.moderate // 0')
        
        echo "📊 Vulnerability Summary:"
        echo "  Critical: $CRITICAL"
        echo "  High: $HIGH"
        echo "  Moderate: $MODERATE"
        
        # Fail if critical or high vulnerabilities exist
        if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
          echo "❌ Critical or high severity vulnerabilities found!"
          npm audit --audit-level=high
          exit 1
        elif [ "$MODERATE" -gt 0 ]; then
          echo "⚠️ Moderate vulnerabilities found (not failing build)"
          npm audit --audit-level=moderate
        else
          echo "✅ No vulnerabilities found!"
        fi
    
    - name: Check for outdated dependencies
      run: |
        echo "🔍 Checking for outdated dependencies..."
        npx npm-check-updates --format json > outdated.json || true
        
        if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
          echo "📦 Outdated dependencies found:"
          npx npm-check-updates
        else
          echo "✅ All dependencies are up to date!"
        fi
    
    - name: License compliance check
      run: |
        echo "📜 Checking license compliance..."
        npx license-checker --summary --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense' || {
          echo "⚠️ Some packages have licenses that need review"
          npx license-checker --excludePrivatePackages --csv > licenses.csv
          echo "License report saved to licenses.csv"
        }

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      id-token: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in filesystem mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'
        wait-for-processing: true