[{"number":722,"created_at":"2025-08-25T20:14:03Z","updated_at":"2025-08-25T20:14:03Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/722","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/722","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"supabase/functions/_shared/smtp-email-service.ts","start_line":146,"end_line":148,"start_column":12,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/722/instances","dismissal_approved_by":null},{"number":721,"created_at":"2025-08-25T20:14:03Z","updated_at":"2025-08-25T20:14:03Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/721","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/721","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"supabase/functions/_shared/sendgrid-email-service.ts","start_line":146,"end_line":148,"start_column":12,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/721/instances","dismissal_approved_by":null},{"number":720,"created_at":"2025-08-25T20:14:03Z","updated_at":"2025-08-25T20:14:03Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/720","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/720","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"supabase/functions/_shared/postmark-email-service.ts","start_line":118,"end_line":120,"start_column":12,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/720/instances","dismissal_approved_by":null},{"number":719,"created_at":"2025-08-25T20:14:03Z","updated_at":"2025-08-25T20:14:03Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/719","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/719","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/double-escaping","severity":"warning","description":"Double escaping or unescaping","name":"js/double-escaping","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-116","security"],"full_description":"When escaping special characters using a meta-character like backslash or ampersand, the meta-character has to be escaped first to avoid double-escaping, and conversely it has to be unescaped last to avoid double-unescaping.","help":"# Double escaping or unescaping\nEscaping meta-characters in untrusted input is an important technique for preventing injection attacks such as cross-site scripting. One particular example of this is HTML entity encoding, where HTML special characters are replaced by HTML character entities to prevent them from being interpreted as HTML markup. For example, the less-than character is encoded as `&lt;` and the double-quote character as `&quot;`. Other examples include backslash-escaping for including untrusted data in string literals and percent-encoding for URI components.\n\nThe reverse process of replacing escape sequences with the characters they represent is known as unescaping.\n\nNote that the escape characters themselves (such as ampersand in the case of HTML encoding) play a special role during escaping and unescaping: they are themselves escaped, but also form part of the escaped representations of other characters. Hence care must be taken to avoid double escaping and unescaping: when escaping, the escape character must be escaped first, when unescaping it has to be unescaped last.\n\nIf used in the context of sanitization, double unescaping may render the sanitization ineffective. Even if it is not used in a security-critical context, it may still result in confusing or garbled output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation. For URI encoding, you can use the standard `encodeURIComponent` and `decodeURIComponent` functions.\n\nOtherwise, make sure to always escape the escape character first, and unescape it last.\n\n\n## Example\nThe following example shows a pair of hand-written HTML encoding and decoding functions:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&amp;/g, \"&\")\n          .replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\");\n};\n\n```\nThe encoding function correctly handles ampersand before the other characters. For example, the string `me & \"you\"` is encoded as `me &amp; &quot;you&quot;`, and the string `&quot;` is encoded as `&amp;quot;`.\n\nThe decoding function, however, incorrectly decodes `&amp;` into `&` before handling the other characters. So while it correctly decodes the first example above, it decodes the second example (`&amp;quot;`) to `\"` (a single double quote), which is not correct.\n\nInstead, the decoding function should decode the ampersand last:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\")\n          .replace(/&amp;/g, \"&\");\n};\n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [html-entities](https://www.npmjs.com/package/html-entities) package.\n* npm: [js-string-escape](https://www.npmjs.com/package/js-string-escape) package.\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This replacement may produce '&' characters that are double-unescaped here."},"location":{"path":"supabase/functions/_shared/smtp-email-service.ts","start_line":146,"end_line":152,"start_column":12,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/719/instances","dismissal_approved_by":null},{"number":718,"created_at":"2025-08-25T20:14:03Z","updated_at":"2025-08-25T20:14:03Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/718","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/718","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/double-escaping","severity":"warning","description":"Double escaping or unescaping","name":"js/double-escaping","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-116","security"],"full_description":"When escaping special characters using a meta-character like backslash or ampersand, the meta-character has to be escaped first to avoid double-escaping, and conversely it has to be unescaped last to avoid double-unescaping.","help":"# Double escaping or unescaping\nEscaping meta-characters in untrusted input is an important technique for preventing injection attacks such as cross-site scripting. One particular example of this is HTML entity encoding, where HTML special characters are replaced by HTML character entities to prevent them from being interpreted as HTML markup. For example, the less-than character is encoded as `&lt;` and the double-quote character as `&quot;`. Other examples include backslash-escaping for including untrusted data in string literals and percent-encoding for URI components.\n\nThe reverse process of replacing escape sequences with the characters they represent is known as unescaping.\n\nNote that the escape characters themselves (such as ampersand in the case of HTML encoding) play a special role during escaping and unescaping: they are themselves escaped, but also form part of the escaped representations of other characters. Hence care must be taken to avoid double escaping and unescaping: when escaping, the escape character must be escaped first, when unescaping it has to be unescaped last.\n\nIf used in the context of sanitization, double unescaping may render the sanitization ineffective. Even if it is not used in a security-critical context, it may still result in confusing or garbled output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation. For URI encoding, you can use the standard `encodeURIComponent` and `decodeURIComponent` functions.\n\nOtherwise, make sure to always escape the escape character first, and unescape it last.\n\n\n## Example\nThe following example shows a pair of hand-written HTML encoding and decoding functions:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&amp;/g, \"&\")\n          .replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\");\n};\n\n```\nThe encoding function correctly handles ampersand before the other characters. For example, the string `me & \"you\"` is encoded as `me &amp; &quot;you&quot;`, and the string `&quot;` is encoded as `&amp;quot;`.\n\nThe decoding function, however, incorrectly decodes `&amp;` into `&` before handling the other characters. So while it correctly decodes the first example above, it decodes the second example (`&amp;quot;`) to `\"` (a single double quote), which is not correct.\n\nInstead, the decoding function should decode the ampersand last:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\")\n          .replace(/&amp;/g, \"&\");\n};\n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [html-entities](https://www.npmjs.com/package/html-entities) package.\n* npm: [js-string-escape](https://www.npmjs.com/package/js-string-escape) package.\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This replacement may produce '&' characters that are double-unescaped here."},"location":{"path":"supabase/functions/_shared/sendgrid-email-service.ts","start_line":146,"end_line":152,"start_column":12,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/718/instances","dismissal_approved_by":null},{"number":717,"created_at":"2025-08-25T20:14:03Z","updated_at":"2025-08-25T20:14:03Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/717","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/717","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/double-escaping","severity":"warning","description":"Double escaping or unescaping","name":"js/double-escaping","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-116","security"],"full_description":"When escaping special characters using a meta-character like backslash or ampersand, the meta-character has to be escaped first to avoid double-escaping, and conversely it has to be unescaped last to avoid double-unescaping.","help":"# Double escaping or unescaping\nEscaping meta-characters in untrusted input is an important technique for preventing injection attacks such as cross-site scripting. One particular example of this is HTML entity encoding, where HTML special characters are replaced by HTML character entities to prevent them from being interpreted as HTML markup. For example, the less-than character is encoded as `&lt;` and the double-quote character as `&quot;`. Other examples include backslash-escaping for including untrusted data in string literals and percent-encoding for URI components.\n\nThe reverse process of replacing escape sequences with the characters they represent is known as unescaping.\n\nNote that the escape characters themselves (such as ampersand in the case of HTML encoding) play a special role during escaping and unescaping: they are themselves escaped, but also form part of the escaped representations of other characters. Hence care must be taken to avoid double escaping and unescaping: when escaping, the escape character must be escaped first, when unescaping it has to be unescaped last.\n\nIf used in the context of sanitization, double unescaping may render the sanitization ineffective. Even if it is not used in a security-critical context, it may still result in confusing or garbled output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation. For URI encoding, you can use the standard `encodeURIComponent` and `decodeURIComponent` functions.\n\nOtherwise, make sure to always escape the escape character first, and unescape it last.\n\n\n## Example\nThe following example shows a pair of hand-written HTML encoding and decoding functions:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&amp;/g, \"&\")\n          .replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\");\n};\n\n```\nThe encoding function correctly handles ampersand before the other characters. For example, the string `me & \"you\"` is encoded as `me &amp; &quot;you&quot;`, and the string `&quot;` is encoded as `&amp;quot;`.\n\nThe decoding function, however, incorrectly decodes `&amp;` into `&` before handling the other characters. So while it correctly decodes the first example above, it decodes the second example (`&amp;quot;`) to `\"` (a single double quote), which is not correct.\n\nInstead, the decoding function should decode the ampersand last:\n\n\n```javascript\nmodule.exports.encode = function(s) {\n  return s.replace(/&/g, \"&amp;\")\n          .replace(/\"/g, \"&quot;\")\n          .replace(/'/g, \"&apos;\");\n};\n\nmodule.exports.decode = function(s) {\n  return s.replace(/&quot;/g, \"\\\"\")\n          .replace(/&apos;/g, \"'\")\n          .replace(/&amp;/g, \"&\");\n};\n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [html-entities](https://www.npmjs.com/package/html-entities) package.\n* npm: [js-string-escape](https://www.npmjs.com/package/js-string-escape) package.\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This replacement may produce '&' characters that are double-unescaped here."},"location":{"path":"supabase/functions/_shared/postmark-email-service.ts","start_line":118,"end_line":124,"start_column":12,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/717/instances","dismissal_approved_by":null},{"number":715,"created_at":"2025-08-25T14:16:10Z","updated_at":"2025-08-25T14:16:10Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/715","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/715","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable error."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":71,"end_line":71,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/715/instances","dismissal_approved_by":null},{"number":714,"created_at":"2025-08-25T14:11:01Z","updated_at":"2025-08-25T14:11:01Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/714","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/714","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/automatic-semicolon-insertion","severity":"note","description":"Semicolon insertion","name":"js/automatic-semicolon-insertion","tags":["language-features","maintainability","non-attributable","quality","readability","statistical"],"full_description":"Code that uses automatic semicolon insertion inconsistently is hard to read and maintain.","help":"# Semicolon insertion\nSome statements in JavaScript do not have to be terminated by an explicit semicolon; the parser will implicitly insert a semicolon when it encounters a newline character in such situations. This is a dangerous feature since it can mask subtle errors and confuse readers; it should not be relied on.\n\n\n## Recommendation\nMake the implicitly inserted semicolon explicit.\n\n\n## Example\nIn the following code snippet, the programmer most likely intended to return an object literal with a single property `status`.\n\n\n```javascript\nfunction f() {\n\treturn\n\t{\n\t\tstatus: 'OK'\n\t}\n}\n```\nHowever, since there is a newline after the `return` keyword, the parser inserts an implicit semicolon after `return`; the object literal is then interpreted as a block containing a single statement with the label `status`. Since it comes right after a `return`, this block is, of course, never executed, and instead of returning an object literal the function now returns `undefined`.\n\nTo fix this bug, the opening curly brace of the object literal should be put on the same line as the `return` keyword:\n\n\n```javascript\nfunction f() {\n\treturn {\n\t\tstatus: 'OK'\n\t};\n}\n```\n\n## References\n* D. Crockford, *JavaScript: The Good Parts*, Appendix A.3. O'Reilly, 2008.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Avoid automated semicolon insertion (97% of all statements in the enclosing function have an explicit semicolon)."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":140,"end_line":140,"start_column":5,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/714/instances","dismissal_approved_by":null},{"number":713,"created_at":"2025-08-25T13:32:39Z","updated_at":"2025-08-25T13:32:39Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/713","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/713","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/automatic-semicolon-insertion","severity":"note","description":"Semicolon insertion","name":"js/automatic-semicolon-insertion","tags":["language-features","maintainability","non-attributable","quality","readability","statistical"],"full_description":"Code that uses automatic semicolon insertion inconsistently is hard to read and maintain.","help":"# Semicolon insertion\nSome statements in JavaScript do not have to be terminated by an explicit semicolon; the parser will implicitly insert a semicolon when it encounters a newline character in such situations. This is a dangerous feature since it can mask subtle errors and confuse readers; it should not be relied on.\n\n\n## Recommendation\nMake the implicitly inserted semicolon explicit.\n\n\n## Example\nIn the following code snippet, the programmer most likely intended to return an object literal with a single property `status`.\n\n\n```javascript\nfunction f() {\n\treturn\n\t{\n\t\tstatus: 'OK'\n\t}\n}\n```\nHowever, since there is a newline after the `return` keyword, the parser inserts an implicit semicolon after `return`; the object literal is then interpreted as a block containing a single statement with the label `status`. Since it comes right after a `return`, this block is, of course, never executed, and instead of returning an object literal the function now returns `undefined`.\n\nTo fix this bug, the opening curly brace of the object literal should be put on the same line as the `return` keyword:\n\n\n```javascript\nfunction f() {\n\treturn {\n\t\tstatus: 'OK'\n\t};\n}\n```\n\n## References\n* D. Crockford, *JavaScript: The Good Parts*, Appendix A.3. O'Reilly, 2008.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Avoid automated semicolon insertion (98% of all statements in the enclosing function have an explicit semicolon)."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":342,"end_line":342,"start_column":5,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/713/instances","dismissal_approved_by":null},{"number":712,"created_at":"2025-08-25T13:32:39Z","updated_at":"2025-08-25T13:32:39Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/712","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/712","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/automatic-semicolon-insertion","severity":"note","description":"Semicolon insertion","name":"js/automatic-semicolon-insertion","tags":["language-features","maintainability","non-attributable","quality","readability","statistical"],"full_description":"Code that uses automatic semicolon insertion inconsistently is hard to read and maintain.","help":"# Semicolon insertion\nSome statements in JavaScript do not have to be terminated by an explicit semicolon; the parser will implicitly insert a semicolon when it encounters a newline character in such situations. This is a dangerous feature since it can mask subtle errors and confuse readers; it should not be relied on.\n\n\n## Recommendation\nMake the implicitly inserted semicolon explicit.\n\n\n## Example\nIn the following code snippet, the programmer most likely intended to return an object literal with a single property `status`.\n\n\n```javascript\nfunction f() {\n\treturn\n\t{\n\t\tstatus: 'OK'\n\t}\n}\n```\nHowever, since there is a newline after the `return` keyword, the parser inserts an implicit semicolon after `return`; the object literal is then interpreted as a block containing a single statement with the label `status`. Since it comes right after a `return`, this block is, of course, never executed, and instead of returning an object literal the function now returns `undefined`.\n\nTo fix this bug, the opening curly brace of the object literal should be put on the same line as the `return` keyword:\n\n\n```javascript\nfunction f() {\n\treturn {\n\t\tstatus: 'OK'\n\t};\n}\n```\n\n## References\n* D. Crockford, *JavaScript: The Good Parts*, Appendix A.3. O'Reilly, 2008.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Avoid automated semicolon insertion (97% of all statements in the enclosing function have an explicit semicolon)."},"location":{"path":"src/pages/AdminEvents.tsx","start_line":74,"end_line":74,"start_column":5,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/712/instances","dismissal_approved_by":null},{"number":698,"created_at":"2025-08-25T12:37:56Z","updated_at":"2025-08-25T12:37:56Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/698","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/698","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import formatDistanceToNow."},"location":{"path":"src/components/AdminLeaderboardManager.tsx","start_line":15,"end_line":15,"start_column":1,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/698/instances","dismissal_approved_by":null},{"number":697,"created_at":"2025-08-25T12:37:56Z","updated_at":"2025-08-25T12:37:56Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/697","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/697","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'error' always evaluates to true."},"location":{"path":"src/api/competition-results.ts","start_line":851,"end_line":851,"start_column":26,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/697/instances","dismissal_approved_by":null},{"number":696,"created_at":"2025-08-25T02:17:00Z","updated_at":"2025-08-25T02:17:01Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/696","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/696","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import createClient."},"location":{"path":"supabase/functions/geocode-address/index.ts","start_line":2,"end_line":2,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/696/instances","dismissal_approved_by":null},{"number":695,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/695","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/695","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import wrapEmailTemplate."},"location":{"path":"supabase/functions/test-email-provider/index.ts","start_line":5,"end_line":5,"start_column":1,"end_column":65},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/695/instances","dismissal_approved_by":null},{"number":694,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/694","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/694","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import wrapEmailTemplate."},"location":{"path":"supabase/functions/process-email-queue/index.ts","start_line":5,"end_line":5,"start_column":1,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/694/instances","dismissal_approved_by":null},{"number":693,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/693","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/693","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable smtpPayload."},"location":{"path":"supabase/functions/_shared/smtp-email-service.ts","start_line":79,"end_line":79,"start_column":13,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/693/instances","dismissal_approved_by":null},{"number":692,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/692","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/692","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable fullMessage."},"location":{"path":"supabase/functions/_shared/smtp-email-service.ts","start_line":73,"end_line":73,"start_column":13,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/692/instances","dismissal_approved_by":null},{"number":691,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/691","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/691","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable width."},"location":{"path":"supabase/functions/_shared/outlook-content-helper.ts","start_line":73,"end_line":73,"start_column":5,"end_column":10},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/691/instances","dismissal_approved_by":null},{"number":690,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/690","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/690","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable hasRoutingRules."},"location":{"path":"src/components/admin-settings/EmailSettingsV3.tsx","start_line":895,"end_line":895,"start_column":11,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/690/instances","dismissal_approved_by":null},{"number":689,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/689","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/689","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable resendQueuedEmail."},"location":{"path":"src/components/admin-settings/EmailSettingsV3.tsx","start_line":855,"end_line":855,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/689/instances","dismissal_approved_by":null},{"number":688,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/688","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/688","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/admin-settings/EmailSettingsV3.tsx","start_line":572,"end_line":572,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/688/instances","dismissal_approved_by":null},{"number":687,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/687","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/687","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable loading."},"location":{"path":"src/components/admin-settings/EmailTemplateEditorV2.tsx","start_line":139,"end_line":139,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/687/instances","dismissal_approved_by":null},{"number":686,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/686","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/686","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable cronEnabled."},"location":{"path":"src/components/admin-settings/EmailSettingsV3.tsx","start_line":122,"end_line":122,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/686/instances","dismissal_approved_by":null},{"number":685,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/685","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/685","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable emailQueue."},"location":{"path":"src/components/admin-settings/EmailSettingsV3.tsx","start_line":113,"end_line":113,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/685/instances","dismissal_approved_by":null},{"number":684,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/684","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/684","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertTriangle, Calendar, Globe, Key, Users, Zap."},"location":{"path":"src/components/admin-settings/EmailSettingsV3.tsx","start_line":3,"end_line":10,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/684/instances","dismissal_approved_by":null},{"number":683,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/683","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/683","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import getTinyMCEScriptUrl."},"location":{"path":"src/components/admin-settings/EmailTemplateEditorV2.tsx","start_line":11,"end_line":11,"start_column":1,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/683/instances","dismissal_approved_by":null},{"number":682,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/682","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/682","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, Bug, CheckCircle, CheckCircle2, Clock, Eye, EyeOff, FileText, Filter, Info, Settings, Shield, X, XCircle."},"location":{"path":"src/components/admin-settings/EmailTemplateEditorV2.tsx","start_line":3,"end_line":8,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/682/instances","dismissal_approved_by":null},{"number":681,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/681","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/681","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable editorReady."},"location":{"path":"src/components/admin-settings/EmailTemplateEditor.tsx","start_line":208,"end_line":208,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/681/instances","dismissal_approved_by":null},{"number":680,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/680","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/680","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable TEMPLATE_CATEGORIES."},"location":{"path":"src/components/admin-settings/EmailTemplateEditor.tsx","start_line":50,"end_line":50,"start_column":7,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/680/instances","dismissal_approved_by":null},{"number":679,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/679","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/679","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports EMAIL_COMPONENTS, EMAIL_TEMPLATE_FOOTER, EMAIL_TEMPLATE_HEADER, EMAIL_TEMPLATE_STYLES, wrapEmailTemplate."},"location":{"path":"src/components/admin-settings/EmailTemplateEditor.tsx","start_line":12,"end_line":18,"start_column":1,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/679/instances","dismissal_approved_by":null},{"number":678,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/678","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/678","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import getTinyMCEScriptUrl."},"location":{"path":"src/components/admin-settings/EmailTemplateEditor.tsx","start_line":11,"end_line":11,"start_column":1,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/678/instances","dismissal_approved_by":null},{"number":677,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/677","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/677","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Clock, Code, EyeOff, Filter, Palette, Settings, Shield."},"location":{"path":"src/components/admin-settings/EmailTemplateEditor.tsx","start_line":3,"end_line":8,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/677/instances","dismissal_approved_by":null},{"number":676,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/676","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/676","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSelectedEmail."},"location":{"path":"src/components/admin-settings/EmailQueueManager.tsx","start_line":39,"end_line":39,"start_column":25,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/676/instances","dismissal_approved_by":null},{"number":675,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/675","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/675","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedEmail."},"location":{"path":"src/components/admin-settings/EmailQueueManager.tsx","start_line":39,"end_line":39,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/675/instances","dismissal_approved_by":null},{"number":674,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:50Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/674","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/674","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Eye, Filter, MoreVertical."},"location":{"path":"src/components/admin-settings/EmailQueueManager.tsx","start_line":3,"end_line":7,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/674/instances","dismissal_approved_by":null},{"number":673,"created_at":"2025-08-24T19:38:49Z","updated_at":"2025-08-24T19:38:49Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/673","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/673","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-dom","severity":"warning","description":"DOM text reinterpreted as HTML","name":"js/xss-through-dom","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from the DOM as HTML can lead to a cross-site scripting vulnerability.","help":"# DOM text reinterpreted as HTML\nExtracting text from a DOM node and interpreting it as HTML can lead to a cross-site scripting vulnerability.\n\nA webpage with this vulnerability reads text from the DOM, and afterwards adds the text as HTML to the DOM. Using text from the DOM as HTML effectively unescapes the text, and thereby invalidates any escaping done on the text. If an attacker is able to control the safe sanitized text, then this vulnerability can be exploited to perform a cross-site scripting attack.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing text to the page, or one of the other solutions that are mentioned in the References section below.\n\n\n## Example\nThe following example shows a webpage using a `data-target` attribute to select and manipulate a DOM element using the JQuery library. In the example, the `data-target` attribute is read into the `target` variable, and the `$` function is then supposed to use the `target` variable as a CSS selector to determine which element should be manipulated.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n    $(target).hide();\n});\n\n```\nHowever, if an attacker can control the `data-target` attribute, then the value of `target` can be used to cause the `$` function to execute arbitrary JavaScript.\n\nThe above vulnerability can be fixed by using `$.find` instead of `$`. The `$.find` function will only interpret `target` as a CSS selector and never as HTML, thereby preventing an XSS attack.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n\t$.find(target).hide();\n});\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://owasp.org/www-community/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"DOM text is reinterpreted as HTML without escaping meta-characters.\nDOM text is reinterpreted as HTML without escaping meta-characters.\nDOM text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"src/components/admin-settings/EmailTemplateEditor.tsx","start_line":518,"end_line":518,"start_column":36,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/673/instances","dismissal_approved_by":null},{"number":660,"created_at":"2025-08-14T16:17:51Z","updated_at":"2025-08-14T16:54:15Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/660","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/660","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable autoCommit."},"location":{"path":"scripts/security-maintenance.ts","start_line":556,"end_line":556,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/660/instances","dismissal_approved_by":null},{"number":659,"created_at":"2025-08-14T16:17:51Z","updated_at":"2025-08-14T16:54:15Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/659","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/659","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable remaining."},"location":{"path":"scripts/security-maintenance.ts","start_line":147,"end_line":147,"start_column":21,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/659/instances","dismissal_approved_by":null},{"number":658,"created_at":"2025-08-14T16:17:51Z","updated_at":"2025-08-14T16:54:15Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/658","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/658","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The file may have changed since it was checked."},"location":{"path":"scripts/security-maintenance.ts","start_line":455,"end_line":455,"start_column":7,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/658/instances","dismissal_approved_by":null},{"number":657,"created_at":"2025-08-14T16:17:51Z","updated_at":"2025-08-14T16:54:15Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/657","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/657","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The file may have changed since it was checked."},"location":{"path":"scripts/security-maintenance.ts","start_line":349,"end_line":349,"start_column":7,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/657/instances","dismissal_approved_by":null},{"number":656,"created_at":"2025-08-14T15:44:04Z","updated_at":"2025-08-14T15:44:04Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/656","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/656","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-sanitization","severity":"warning","description":"Incomplete string escaping or encoding","name":"js/incomplete-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A string transformer that does not replace or escape all occurrences of a meta-character may be ineffective.","help":"# Incomplete string escaping or encoding\nSanitizing untrusted input is a common technique for preventing injection attacks such as SQL injection or cross-site scripting. Usually, this is done by escaping meta-characters such as quotes in a domain-specific way so that they are treated as normal characters.\n\nHowever, directly using the string `replace` method to perform escaping is notoriously error-prone. Common mistakes include only replacing the first occurrence of a meta-character, or backslash-escaping various meta-characters but not the backslash itself.\n\nIn the former case, later meta-characters are left undisturbed and can be used to subvert the sanitization. In the latter case, preceding a meta-character with a backslash leads to the backslash being escaped, but the meta-character appearing un-escaped, which again makes the sanitization ineffective.\n\nEven if the escaped string is not used in a security-critical context, incomplete escaping may still have undesirable effects, such as badly rendered or confusing output.\n\n\n## Recommendation\nUse a (well-tested) sanitization library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\nAn even safer alternative is to design the application so that sanitization is not needed, for instance by using prepared statements for SQL queries.\n\nOtherwise, make sure to use a regular expression with the `g` flag to ensure that all occurrences are replaced, and remember to escape backslashes if applicable.\n\n\n## Example\nFor example, assume that we want to embed a user-controlled string `accountNumber` into a SQL query as part of a string literal. To avoid SQL injection, we need to ensure that the string does not contain un-escaped single-quote characters. The following function attempts to ensure this by doubling single quotes, and thereby escaping them:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(\"'\", \"''\");\n}\n\n```\nAs written, this sanitizer is ineffective: if the first argument to `replace` is a string literal (as in this case), only the *first* occurrence of that string is replaced.\n\nAs mentioned above, the function `escapeQuotes` should be replaced with a purpose-built sanitization library, such as the npm module `sqlstring`. Many other sanitization libraries are available from npm and other sources.\n\nIf this is not an option, `escapeQuotes` should be rewritten to use a regular expression with the `g` (\"global\") flag instead:\n\n\n```javascript\nfunction escapeQuotes(s) {\n  return s.replace(/'/g, \"''\");\n}\n\n```\nNote that it is very important to include the global flag: `s.replace(/'/, \"''\")` *without* the global flag is equivalent to the first example above and only replaces the first quote.\n\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* npm: [sqlstring](https://www.npmjs.com/package/sqlstring) package.\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This does not escape backslash characters in the input."},"location":{"path":"scripts/scan-for-secrets.ts","start_line":394,"end_line":394,"start_column":34,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/656/instances","dismissal_approved_by":null},{"number":655,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/655","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/655","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Expression expected."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":100,"end_column":101},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/655/instances","dismissal_approved_by":null},{"number":654,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/654","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/654","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":82,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/654/instances","dismissal_approved_by":null},{"number":653,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/653","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/653","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":77,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/653/instances","dismissal_approved_by":null},{"number":652,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/652","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/652","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: ')' expected."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":68,"end_column":69},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/652/instances","dismissal_approved_by":null},{"number":651,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/651","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/651","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: ';' expected."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":64,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/651/instances","dismissal_approved_by":null},{"number":650,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/650","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/650","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: ';' expected."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":44,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/650/instances","dismissal_approved_by":null},{"number":649,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/649","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/649","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: "},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":38,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/649/instances","dismissal_approved_by":null},{"number":648,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/648","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/648","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":21,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/648/instances","dismissal_approved_by":null},{"number":647,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/647","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/647","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":19,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/647/instances","dismissal_approved_by":null},{"number":646,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/646","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/646","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: A type predicate is only allowed in return type position for functions and methods."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":16,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/646/instances","dismissal_approved_by":null},{"number":645,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/645","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/645","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":8,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/645/instances","dismissal_approved_by":null},{"number":644,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/644","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/644","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":3,"end_line":3,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/644/instances","dismissal_approved_by":null},{"number":643,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/643","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/643","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: ';' expected."},"location":{"path":"schema_check.ts","start_line":2,"end_line":2,"start_column":146,"end_column":147},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/643/instances","dismissal_approved_by":null},{"number":642,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/642","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/642","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'get'?"},"location":{"path":"schema_check.ts","start_line":2,"end_line":2,"start_column":50,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/642/instances","dismissal_approved_by":null},{"number":641,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/641","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/641","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":2,"end_line":2,"start_column":34,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/641/instances","dismissal_approved_by":null},{"number":640,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/640","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/640","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":2,"end_line":2,"start_column":28,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/640/instances","dismissal_approved_by":null},{"number":639,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/639","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/639","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":2,"end_line":2,"start_column":11,"end_column":12},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/639/instances","dismissal_approved_by":null},{"number":638,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/638","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/638","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":2,"end_line":2,"start_column":8,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/638/instances","dismissal_approved_by":null},{"number":637,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/637","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/637","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":2,"end_line":2,"start_column":1,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/637/instances","dismissal_approved_by":null},{"number":636,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/636","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/636","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: A type predicate is only allowed in return type position for functions and methods."},"location":{"path":"schema_check.ts","start_line":1,"end_line":1,"start_column":28,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/636/instances","dismissal_approved_by":null},{"number":635,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/635","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/635","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unknown keyword or identifier. Did you mean 'var iable'?"},"location":{"path":"schema_check.ts","start_line":1,"end_line":1,"start_column":19,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/635/instances","dismissal_approved_by":null},{"number":634,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/634","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/634","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/syntax-error","severity":"note","description":"Syntax error","name":"js/syntax-error","tags":["correctness","language-features","quality","reliability"],"full_description":"A piece of code could not be parsed due to syntax errors.","help":"# Syntax error\nSyntax errors prevent code from executing correctly. If a piece of code contains syntax errors, this most likely indicates that it is never run and thus is dead code that should be removed.\n\n\n## Recommendation\nFix the syntax error. It may also be worth investigating whether the file containing the erroneous code fragment is ever included from anywhere. If it is not, then it is dead code, which should be removed.\n\n\n## Example\nIn the following example, function `findBox` contains incomplete code: the string literal and its containing block statement are not properly terminated, leading to a syntax error.\n\n\n```javascript\nfunction findBox() {\n  return $(\"box.important\n```\n\n## References\n* Ecma International, *ECMAScript Language Definition*, 5.1 Edition, Section 15.11.6.4. ECMA, 2011.\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Error: Unexpected keyword or identifier."},"location":{"path":"schema_check.ts","start_line":1,"end_line":1,"start_column":7,"end_column":8},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/634/instances","dismissal_approved_by":null},{"number":630,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/630","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/630","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to userId here is unused."},"location":{"path":"src/services/activityLogger.ts","start_line":55,"end_line":55,"start_column":9,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/630/instances","dismissal_approved_by":null},{"number":629,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/629","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/629","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to logoUrl here is unused."},"location":{"path":"src/pages/Profile.tsx","start_line":994,"end_line":994,"start_column":9,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/629/instances","dismissal_approved_by":null},{"number":628,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/628","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/628","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The initial value of newIndex is unused, since it is always overwritten."},"location":{"path":"src/pages/PublicMemberProfile.tsx","start_line":217,"end_line":217,"start_column":9,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/628/instances","dismissal_approved_by":null},{"number":627,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/627","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/627","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The initial value of bestPosition is unused, since it is always overwritten."},"location":{"path":"src/pages/NavigationManager.tsx","start_line":125,"end_line":125,"start_column":11,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/627/instances","dismissal_approved_by":null},{"number":626,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/626","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/626","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to dbSubscriptionPlan here is unused."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":347,"end_line":347,"start_column":9,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/626/instances","dismissal_approved_by":null},{"number":625,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/625","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/625","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to dbSubscriptionPlan here is unused."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":342,"end_line":342,"start_column":9,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/625/instances","dismissal_approved_by":null},{"number":624,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/624","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/624","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to dbSubscriptionPlan here is unused."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":336,"end_line":336,"start_column":9,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/624/instances","dismissal_approved_by":null},{"number":623,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/623","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/623","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to dbSubscriptionPlan here is unused."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":330,"end_line":330,"start_column":9,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/623/instances","dismissal_approved_by":null},{"number":622,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/622","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/622","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to dbSubscriptionPlan here is unused."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":325,"end_line":325,"start_column":9,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/622/instances","dismissal_approved_by":null},{"number":621,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/621","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/621","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The initial value of dbSubscriptionPlan is unused, since it is always overwritten."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":319,"end_line":319,"start_column":11,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/621/instances","dismissal_approved_by":null},{"number":620,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/620","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/620","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The initial value of teams is unused, since it is always overwritten."},"location":{"path":"src/pages/EditUser.tsx","start_line":42,"end_line":42,"start_column":9,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/620/instances","dismissal_approved_by":null},{"number":619,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/619","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/619","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The initial value of bestPosition is unused, since it is always overwritten."},"location":{"path":"src/pages/AdManagement.tsx","start_line":534,"end_line":534,"start_column":13,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/619/instances","dismissal_approved_by":null},{"number":618,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/618","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/618","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The value assigned to error here is unused."},"location":{"path":"src/contexts/AuthContext.tsx","start_line":215,"end_line":215,"start_column":11,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/618/instances","dismissal_approved_by":null},{"number":617,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/617","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/617","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-assignment-to-local","severity":"warning","description":"Useless assignment to local variable","name":"js/useless-assignment-to-local","tags":["external/cwe/cwe-563","maintainability","quality","useless-code"],"full_description":"An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.","help":"# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The initial value of fixedLine is unused, since it is always overwritten."},"location":{"path":"scripts/scan-for-secrets.ts","start_line":234,"end_line":234,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/617/instances","dismissal_approved_by":null},{"number":616,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/616","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/616","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"test-sql-injection-fixes.ts","start_line":198,"end_line":198,"start_column":13,"end_column":17},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/616/instances","dismissal_approved_by":null},{"number":615,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/615","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/615","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"test-sql-injection-fixes.ts","start_line":166,"end_line":166,"start_column":15,"end_column":19},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/615/instances","dismissal_approved_by":null},{"number":614,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/614","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/614","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"test-sql-injection-fixes.ts","start_line":129,"end_line":129,"start_column":13,"end_column":17},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/614/instances","dismissal_approved_by":null},{"number":613,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/613","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/613","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"test-sql-injection-fixes.ts","start_line":68,"end_line":68,"start_column":13,"end_column":17},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/613/instances","dismissal_approved_by":null},{"number":612,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/612","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/612","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"test-sql-injection-fixes.ts","start_line":37,"end_line":37,"start_column":13,"end_column":17},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/612/instances","dismissal_approved_by":null},{"number":611,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/611","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/611","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable uploadData."},"location":{"path":"supabase/functions/upload-ad-image/index.ts","start_line":203,"end_line":203,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/611/instances","dismissal_approved_by":null},{"number":610,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/610","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/610","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import RateLimitConfigs."},"location":{"path":"supabase/functions/upload-ad-image/index.ts","start_line":3,"end_line":3,"start_column":1,"end_column":99},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/610/instances","dismissal_approved_by":null},{"number":609,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/609","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/609","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused function handlePaymentIntentSucceeded."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":878,"end_line":878,"start_column":16,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/609/instances","dismissal_approved_by":null},{"number":608,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/608","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/608","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused function handlePaymentFailed."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":847,"end_line":847,"start_column":16,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/608/instances","dismissal_approved_by":null},{"number":607,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/607","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/607","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused function handlePaymentSucceeded."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":816,"end_line":816,"start_column":16,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/607/instances","dismissal_approved_by":null},{"number":606,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/606","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/606","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused function handleSubscriptionCancelled."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":795,"end_line":795,"start_column":16,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/606/instances","dismissal_approved_by":null},{"number":605,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/605","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/605","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable priceId."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":760,"end_line":760,"start_column":11,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/605/instances","dismissal_approved_by":null},{"number":604,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/604","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/604","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused function handleSubscriptionChange."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":750,"end_line":750,"start_column":16,"end_column":40},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/604/instances","dismissal_approved_by":null},{"number":603,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/603","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/603","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable monthlyError."},"location":{"path":"supabase/functions/track-usage/index.ts","start_line":231,"end_line":231,"start_column":37,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/603/instances","dismissal_approved_by":null},{"number":602,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/602","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/602","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable existingError."},"location":{"path":"supabase/functions/track-usage/index.ts","start_line":114,"end_line":114,"start_column":41,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/602/instances","dismissal_approved_by":null},{"number":601,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/601","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/601","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable withCheck."},"location":{"path":"supabase/functions/ultimate-rls-fix/index.ts","start_line":40,"end_line":40,"start_column":51,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/601/instances","dismissal_approved_by":null},{"number":600,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/600","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/600","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable qual."},"location":{"path":"supabase/functions/ultimate-rls-fix/index.ts","start_line":40,"end_line":40,"start_column":45,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/600/instances","dismissal_approved_by":null},{"number":599,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/599","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/599","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused function getStripeWebhookConfig."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":21,"end_line":21,"start_column":16,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/599/instances","dismissal_approved_by":null},{"number":598,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/598","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/598","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import edgeEmailService."},"location":{"path":"supabase/functions/stripe-webhook/index.ts","start_line":5,"end_line":5,"start_column":1,"end_column":68},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/598/instances","dismissal_approved_by":null},{"number":597,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/597","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/597","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable configError."},"location":{"path":"supabase/functions/test-payment-env/index.ts","start_line":91,"end_line":91,"start_column":36,"end_column":47},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/597/instances","dismissal_approved_by":null},{"number":596,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/596","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/596","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable usageError."},"location":{"path":"supabase/functions/permission-service/index.ts","start_line":274,"end_line":274,"start_column":39,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/596/instances","dismissal_approved_by":null},{"number":595,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/595","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/595","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable rateLimiter."},"location":{"path":"supabase/functions/payment-methods/index.ts","start_line":26,"end_line":26,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/595/instances","dismissal_approved_by":null},{"number":594,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/594","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/594","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import createRateLimitHeaders."},"location":{"path":"supabase/functions/payment-methods/index.ts","start_line":6,"end_line":6,"start_column":1,"end_column":99},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/594/instances","dismissal_approved_by":null},{"number":593,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/593","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/593","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable lowerMessage."},"location":{"path":"supabase/functions/generate-ai-content/index.ts","start_line":235,"end_line":235,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/593/instances","dismissal_approved_by":null},{"number":592,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/592","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/592","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import RateLimitConfigs."},"location":{"path":"supabase/functions/generate-ai-content/index.ts","start_line":4,"end_line":4,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/592/instances","dismissal_approved_by":null},{"number":591,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/591","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/591","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable withCheck."},"location":{"path":"supabase/functions/final-rls-cleanup/index.ts","start_line":155,"end_line":155,"start_column":51,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/591/instances","dismissal_approved_by":null},{"number":590,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/590","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/590","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable qual."},"location":{"path":"supabase/functions/final-rls-cleanup/index.ts","start_line":155,"end_line":155,"start_column":45,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/590/instances","dismissal_approved_by":null},{"number":589,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/589","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/589","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable withCheck."},"location":{"path":"supabase/functions/final-rls-cleanup/index.ts","start_line":45,"end_line":45,"start_column":51,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/589/instances","dismissal_approved_by":null},{"number":588,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:47Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/588","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/588","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable qual."},"location":{"path":"supabase/functions/final-rls-cleanup/index.ts","start_line":45,"end_line":45,"start_column":45,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/588/instances","dismissal_approved_by":null},{"number":587,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/587","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/587","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable withCheck."},"location":{"path":"supabase/functions/fix-nested-selects/index.ts","start_line":46,"end_line":46,"start_column":51,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/587/instances","dismissal_approved_by":null},{"number":586,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/586","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/586","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable qual."},"location":{"path":"supabase/functions/fix-nested-selects/index.ts","start_line":46,"end_line":46,"start_column":45,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/586/instances","dismissal_approved_by":null},{"number":585,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/585","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/585","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable successHeaders."},"location":{"path":"supabase/functions/create-payment-intent/index.ts","start_line":256,"end_line":256,"start_column":11,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/585/instances","dismissal_approved_by":null},{"number":584,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/584","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/584","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports getCorsHeaders, handleCors."},"location":{"path":"supabase/functions/create-paypal-payment/index.ts","start_line":3,"end_line":3,"start_column":1,"end_column":64},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/584/instances","dismissal_approved_by":null},{"number":583,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/583","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/583","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable securityMiddleware."},"location":{"path":"supabase/functions/create-payment-intent/index-improved.ts","start_line":47,"end_line":47,"start_column":9,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/583/instances","dismissal_approved_by":null},{"number":582,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/582","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/582","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import EdgeFunctionHeaders."},"location":{"path":"supabase/functions/create-payment-intent/index-improved.ts","start_line":23,"end_line":23,"start_column":1,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/582/instances","dismissal_approved_by":null},{"number":581,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/581","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/581","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable paymentRecord."},"location":{"path":"supabase/functions/confirm-payment/index.ts","start_line":162,"end_line":162,"start_column":21,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/581/instances","dismissal_approved_by":null},{"number":580,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/580","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/580","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable tableCheck."},"location":{"path":"supabase/functions/admin-update-keys/index.ts","start_line":88,"end_line":88,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/580/instances","dismissal_approved_by":null},{"number":579,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/579","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/579","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable error."},"location":{"path":"supabase/functions/_shared/validation-middleware.ts","start_line":187,"end_line":187,"start_column":29,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/579/instances","dismissal_approved_by":null},{"number":578,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/578","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/578","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable supabaseClient."},"location":{"path":"supabase/functions/admin-create-settings-table/index.ts","start_line":16,"end_line":16,"start_column":11,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/578/instances","dismissal_approved_by":null},{"number":577,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/577","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/577","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import serve."},"location":{"path":"supabase/functions/_shared/mailgun-email-service.ts","start_line":2,"end_line":2,"start_column":1,"end_column":70},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/577/instances","dismissal_approved_by":null},{"number":576,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/576","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/576","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import getEdgeSecurityHeaders."},"location":{"path":"supabase/functions/_shared/cors.ts","start_line":3,"end_line":3,"start_column":1,"end_column":93},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/576/instances","dismissal_approved_by":null},{"number":575,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/575","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/575","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable name."},"location":{"path":"src/utils/dynamicFeatureRegistry.ts","start_line":215,"end_line":215,"start_column":19,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/575/instances","dismissal_approved_by":null},{"number":574,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/574","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/574","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable connectionTest."},"location":{"path":"src/utils/databaseTest.ts","start_line":9,"end_line":9,"start_column":19,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/574/instances","dismissal_approved_by":null},{"number":573,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/573","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/573","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/services/featureFlagService.ts","start_line":106,"end_line":106,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/573/instances","dismissal_approved_by":null},{"number":572,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/572","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/572","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/services/featureFlagService.ts","start_line":79,"end_line":79,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/572/instances","dismissal_approved_by":null},{"number":571,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/571","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/571","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import isDevelopment."},"location":{"path":"src/services/backup.ts","start_line":3,"end_line":3,"start_column":1,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/571/instances","dismissal_approved_by":null},{"number":570,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/570","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/570","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import cronService."},"location":{"path":"src/services/backup.ts","start_line":2,"end_line":2,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/570/instances","dismissal_approved_by":null},{"number":569,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/569","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/569","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import supabase."},"location":{"path":"src/services/backup.ts","start_line":1,"end_line":1,"start_column":1,"end_column":44},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/569/instances","dismissal_approved_by":null},{"number":568,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/568","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/568","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable metadata."},"location":{"path":"src/services/adImageService.ts","start_line":74,"end_line":74,"start_column":13,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/568/instances","dismissal_approved_by":null},{"number":567,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/567","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/567","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable startTime."},"location":{"path":"src/security/SecureKeyManager.ts","start_line":103,"end_line":103,"start_column":11,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/567/instances","dismissal_approved_by":null},{"number":566,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/566","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/566","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getMembershipTypeBadge."},"location":{"path":"src/pages/UserDetails.tsx","start_line":246,"end_line":246,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/566/instances","dismissal_approved_by":null},{"number":565,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/565","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/565","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Phone."},"location":{"path":"src/pages/UserDetails.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":212},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/565/instances","dismissal_approved_by":null},{"number":564,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/564","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/564","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import getPaymentConfig."},"location":{"path":"src/pages/UserBilling.tsx","start_line":15,"end_line":15,"start_column":1,"end_column":86},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/564/instances","dismissal_approved_by":null},{"number":563,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/563","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/563","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import loadPayPalSDK."},"location":{"path":"src/pages/UserBilling.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/563/instances","dismissal_approved_by":null},{"number":562,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/562","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/562","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports PayPalButtons, PayPalScriptProvider."},"location":{"path":"src/pages/UserBilling.tsx","start_line":13,"end_line":13,"start_column":1,"end_column":79},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/562/instances","dismissal_approved_by":null},{"number":561,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/561","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/561","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports CardElement, useElements, useStripe."},"location":{"path":"src/pages/UserBilling.tsx","start_line":12,"end_line":12,"start_column":1,"end_column":89},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/561/instances","dismissal_approved_by":null},{"number":560,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/560","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/560","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import RefreshCw."},"location":{"path":"src/pages/UserBilling.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":221},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/560/instances","dismissal_approved_by":null},{"number":559,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/559","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/559","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useRef."},"location":{"path":"src/pages/UserBilling.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/559/instances","dismissal_approved_by":null},{"number":558,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/558","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/558","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Mail."},"location":{"path":"src/pages/VerifyEmail.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":67},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/558/instances","dismissal_approved_by":null},{"number":556,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/556","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/556","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import AudioSystemData."},"location":{"path":"src/pages/SPLCalculator.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/556/instances","dismissal_approved_by":null},{"number":555,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/555","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/555","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleLogEvent."},"location":{"path":"src/pages/Profile.tsx","start_line":1234,"end_line":1234,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/555/instances","dismissal_approved_by":null},{"number":554,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/554","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/554","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable filteredTeams."},"location":{"path":"src/pages/Profile.tsx","start_line":1206,"end_line":1206,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/554/instances","dismissal_approved_by":null},{"number":553,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/553","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/553","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getTeamTypeColor."},"location":{"path":"src/pages/Profile.tsx","start_line":1201,"end_line":1201,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/553/instances","dismissal_approved_by":null},{"number":552,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/552","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/552","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getTeamTypeIcon."},"location":{"path":"src/pages/Profile.tsx","start_line":1196,"end_line":1196,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/552/instances","dismissal_approved_by":null},{"number":551,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/551","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/551","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleJoinTeam."},"location":{"path":"src/pages/Profile.tsx","start_line":882,"end_line":882,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/551/instances","dismissal_approved_by":null},{"number":550,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/550","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/550","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable canManageRole."},"location":{"path":"src/pages/Profile.tsx","start_line":864,"end_line":864,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/550/instances","dismissal_approved_by":null},{"number":549,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/549","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/549","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Mic."},"location":{"path":"src/pages/SearchResults.tsx","start_line":3,"end_line":16,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/549/instances","dismissal_approved_by":null},{"number":548,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/548","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/548","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable loadUserStats."},"location":{"path":"src/pages/Profile.tsx","start_line":632,"end_line":632,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/548/instances","dismissal_approved_by":null},{"number":547,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/547","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/547","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleTerminateSession."},"location":{"path":"src/pages/Profile.tsx","start_line":516,"end_line":516,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/547/instances","dismissal_approved_by":null},{"number":546,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/546","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/546","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showLogCAEEventModal."},"location":{"path":"src/pages/Profile.tsx","start_line":301,"end_line":301,"start_column":10,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/546/instances","dismissal_approved_by":null},{"number":545,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/545","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/545","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showLogEventModal."},"location":{"path":"src/pages/Profile.tsx","start_line":300,"end_line":300,"start_column":10,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/545/instances","dismissal_approved_by":null},{"number":544,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/544","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/544","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setRegisteredEvents."},"location":{"path":"src/pages/Profile.tsx","start_line":297,"end_line":297,"start_column":28,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/544/instances","dismissal_approved_by":null},{"number":543,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/543","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/543","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable registeredEvents."},"location":{"path":"src/pages/Profile.tsx","start_line":297,"end_line":297,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/543/instances","dismissal_approved_by":null},{"number":542,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/542","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/542","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setFavoriteEvents."},"location":{"path":"src/pages/Profile.tsx","start_line":296,"end_line":296,"start_column":26,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/542/instances","dismissal_approved_by":null},{"number":541,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/541","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/541","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable favoriteEvents."},"location":{"path":"src/pages/Profile.tsx","start_line":296,"end_line":296,"start_column":10,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/541/instances","dismissal_approved_by":null},{"number":540,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/540","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/540","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setUserPreferences."},"location":{"path":"src/pages/Profile.tsx","start_line":295,"end_line":295,"start_column":27,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/540/instances","dismissal_approved_by":null},{"number":539,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/539","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/539","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable userPreferences."},"location":{"path":"src/pages/Profile.tsx","start_line":295,"end_line":295,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/539/instances","dismissal_approved_by":null},{"number":538,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/538","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/538","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setHelpTopic."},"location":{"path":"src/pages/Profile.tsx","start_line":294,"end_line":294,"start_column":21,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/538/instances","dismissal_approved_by":null},{"number":537,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/537","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/537","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable helpTopic."},"location":{"path":"src/pages/Profile.tsx","start_line":294,"end_line":294,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/537/instances","dismissal_approved_by":null},{"number":536,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/536","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/536","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setShowHelpModal."},"location":{"path":"src/pages/Profile.tsx","start_line":293,"end_line":293,"start_column":25,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/536/instances","dismissal_approved_by":null},{"number":535,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/535","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/535","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showHelpModal."},"location":{"path":"src/pages/Profile.tsx","start_line":293,"end_line":293,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/535/instances","dismissal_approved_by":null},{"number":534,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/534","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/534","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setLinkFormData."},"location":{"path":"src/pages/Profile.tsx","start_line":262,"end_line":262,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/534/instances","dismissal_approved_by":null},{"number":533,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/533","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/533","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable linkFormData."},"location":{"path":"src/pages/Profile.tsx","start_line":262,"end_line":262,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/533/instances","dismissal_approved_by":null},{"number":532,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/532","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/532","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setVerificationSuccess."},"location":{"path":"src/pages/Profile.tsx","start_line":261,"end_line":261,"start_column":31,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/532/instances","dismissal_approved_by":null},{"number":531,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/531","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/531","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable verificationSuccess."},"location":{"path":"src/pages/Profile.tsx","start_line":261,"end_line":261,"start_column":10,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/531/instances","dismissal_approved_by":null},{"number":530,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/530","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/530","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setVerificationError."},"location":{"path":"src/pages/Profile.tsx","start_line":260,"end_line":260,"start_column":29,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/530/instances","dismissal_approved_by":null},{"number":529,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/529","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/529","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable verificationError."},"location":{"path":"src/pages/Profile.tsx","start_line":260,"end_line":260,"start_column":10,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/529/instances","dismissal_approved_by":null},{"number":528,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/528","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/528","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setIsSubmittingVerification."},"location":{"path":"src/pages/Profile.tsx","start_line":259,"end_line":259,"start_column":36,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/528/instances","dismissal_approved_by":null},{"number":527,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/527","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/527","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isSubmittingVerification."},"location":{"path":"src/pages/Profile.tsx","start_line":259,"end_line":259,"start_column":10,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/527/instances","dismissal_approved_by":null},{"number":526,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/526","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/526","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setVerificationDocuments."},"location":{"path":"src/pages/Profile.tsx","start_line":258,"end_line":258,"start_column":33,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/526/instances","dismissal_approved_by":null},{"number":525,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/525","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/525","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable verificationDocuments."},"location":{"path":"src/pages/Profile.tsx","start_line":258,"end_line":258,"start_column":10,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/525/instances","dismissal_approved_by":null},{"number":524,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/524","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/524","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setTeamSearchQuery."},"location":{"path":"src/pages/Profile.tsx","start_line":149,"end_line":149,"start_column":27,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/524/instances","dismissal_approved_by":null},{"number":523,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/523","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/523","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showBrowseTeamsModal."},"location":{"path":"src/pages/Profile.tsx","start_line":148,"end_line":148,"start_column":10,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/523/instances","dismissal_approved_by":null},{"number":522,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/522","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/522","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import LogCAEEventModal."},"location":{"path":"src/pages/Profile.tsx","start_line":16,"end_line":16,"start_column":1,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/522/instances","dismissal_approved_by":null},{"number":521,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/521","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/521","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Legend, Line, LineChart."},"location":{"path":"src/pages/Profile.tsx","start_line":15,"end_line":15,"start_column":1,"end_column":147},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/521/instances","dismissal_approved_by":null},{"number":520,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/520","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/520","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Award, Car, Download, ExternalLink, Globe, LogOut, MapPin, Phone, Target, Trash2, Wrench."},"location":{"path":"src/pages/Profile.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":413},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/520/instances","dismissal_approved_by":null},{"number":519,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/519","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/519","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, Filter, Lightbulb, MessageSquare, Target, Zap."},"location":{"path":"src/pages/Resources.tsx","start_line":7,"end_line":29,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/519/instances","dismissal_approved_by":null},{"number":518,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/518","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/518","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable remainingAttempts."},"location":{"path":"src/pages/Register.tsx","start_line":432,"end_line":432,"start_column":13,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/518/instances","dismissal_approved_by":null},{"number":517,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/517","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/517","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable captchaLoading."},"location":{"path":"src/pages/Register.tsx","start_line":90,"end_line":90,"start_column":10,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/517/instances","dismissal_approved_by":null},{"number":516,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/516","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/516","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports CreditCard, Edit."},"location":{"path":"src/pages/Register.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":183},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/516/instances","dismissal_approved_by":null},{"number":515,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/515","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/515","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports FaEnvelope, FaExpand."},"location":{"path":"src/pages/PublicMemberProfile.tsx","start_line":5,"end_line":10,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/515/instances","dismissal_approved_by":null},{"number":514,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/514","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/514","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable uploadData."},"location":{"path":"src/pages/MemberProfileSettings.tsx","start_line":420,"end_line":420,"start_column":21,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/514/instances","dismissal_approved_by":null},{"number":513,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/513","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/513","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable features."},"location":{"path":"src/pages/MemberProfileSettings.tsx","start_line":135,"end_line":135,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/513/instances","dismissal_approved_by":null},{"number":512,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/512","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/512","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports FaEyeSlash, FaLock, FaMusic, FaUsers."},"location":{"path":"src/pages/MemberProfileSettings.tsx","start_line":6,"end_line":6,"start_column":1,"end_column":282},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/512/instances","dismissal_approved_by":null},{"number":511,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/511","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/511","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable generateTempPassword."},"location":{"path":"src/pages/Pricing.tsx","start_line":202,"end_line":202,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/511/instances","dismissal_approved_by":null},{"number":510,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/510","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/510","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports FileText, Image, Upload."},"location":{"path":"src/pages/OrganizationManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":97},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/510/instances","dismissal_approved_by":null},{"number":509,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/509","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/509","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Shield, Star."},"location":{"path":"src/pages/OrganizationPricing.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/509/instances","dismissal_approved_by":null},{"number":508,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/508","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/508","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import scrollToRef."},"location":{"path":"src/pages/NavigationManager.tsx","start_line":47,"end_line":47,"start_column":1,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/508/instances","dismissal_approved_by":null},{"number":507,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/507","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/507","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Move."},"location":{"path":"src/pages/NavigationManager.tsx","start_line":5,"end_line":46,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/507/instances","dismissal_approved_by":null},{"number":506,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/506","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/506","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Link."},"location":{"path":"src/pages/NavigationManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/506/instances","dismissal_approved_by":null},{"number":505,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/505","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/505","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getPriorityColor."},"location":{"path":"src/pages/NotificationHistory.tsx","start_line":368,"end_line":368,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/505/instances","dismissal_approved_by":null},{"number":504,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/504","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/504","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import MessageSquare."},"location":{"path":"src/pages/OrganizationFeatures.tsx","start_line":4,"end_line":23,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/504/instances","dismissal_approved_by":null},{"number":503,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/503","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/503","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Archive, Download, EyeOff, Filter, MoreVertical."},"location":{"path":"src/pages/NotificationHistory.tsx","start_line":3,"end_line":24,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/503/instances","dismissal_approved_by":null},{"number":502,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/502","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/502","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import SimpleNotification."},"location":{"path":"src/pages/NotificationDetail.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":103},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/502/instances","dismissal_approved_by":null},{"number":501,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/501","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/501","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable audioError."},"location":{"path":"src/pages/MemberProfile.tsx","start_line":80,"end_line":80,"start_column":45,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/501/instances","dismissal_approved_by":null},{"number":500,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/500","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/500","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable userError."},"location":{"path":"src/pages/MemberProfile.tsx","start_line":67,"end_line":67,"start_column":38,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/500/instances","dismissal_approved_by":null},{"number":499,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/499","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/499","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import AudioDiagramSettings."},"location":{"path":"src/pages/MemberProfile.tsx","start_line":15,"end_line":15,"start_column":1,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/499/instances","dismissal_approved_by":null},{"number":498,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/498","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/498","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Edit3."},"location":{"path":"src/pages/MemberProfile.tsx","start_line":11,"end_line":11,"start_column":1,"end_column":38},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/498/instances","dismissal_approved_by":null},{"number":497,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/497","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/497","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import FaExpand."},"location":{"path":"src/pages/MemberProfile.tsx","start_line":5,"end_line":10,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/497/instances","dismissal_approved_by":null},{"number":496,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/496","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/496","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Link."},"location":{"path":"src/pages/MemberProfile.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/496/instances","dismissal_approved_by":null},{"number":495,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/495","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/495","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import AdDisplay."},"location":{"path":"src/pages/MemberAdDashboard.tsx","start_line":6,"end_line":6,"start_column":1,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/495/instances","dismissal_approved_by":null},{"number":494,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/494","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/494","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Calendar, Settings, Trash2."},"location":{"path":"src/pages/MemberAdDashboard.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":141},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/494/instances","dismissal_approved_by":null},{"number":493,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/493","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/493","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isAuthenticated."},"location":{"path":"src/pages/Login.tsx","start_line":15,"end_line":15,"start_column":50,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/493/instances","dismissal_approved_by":null},{"number":492,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/492","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/492","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/Leaderboard.tsx","start_line":86,"end_line":86,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/492/instances","dismissal_approved_by":null},{"number":491,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/491","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/491","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setShowFilters."},"location":{"path":"src/pages/Leaderboard.tsx","start_line":82,"end_line":82,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/491/instances","dismissal_approved_by":null},{"number":490,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/490","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/490","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showFilters."},"location":{"path":"src/pages/Leaderboard.tsx","start_line":82,"end_line":82,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/490/instances","dismissal_approved_by":null},{"number":489,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/489","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/489","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedCompetitor."},"location":{"path":"src/pages/Leaderboard.tsx","start_line":81,"end_line":81,"start_column":10,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/489/instances","dismissal_approved_by":null},{"number":488,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/488","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/488","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import UserPlus."},"location":{"path":"src/pages/Login.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":103},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/488/instances","dismissal_approved_by":null},{"number":487,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/487","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/487","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useEffect."},"location":{"path":"src/pages/Login.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/487/instances","dismissal_approved_by":null},{"number":486,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/486","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/486","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Legend, Line, LineChart, PolarAngleAxis, PolarGrid, PolarRadiusAxis, Radar, RadarChart."},"location":{"path":"src/pages/Leaderboard.tsx","start_line":13,"end_line":17,"start_column":1,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/486/instances","dismissal_approved_by":null},{"number":485,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/485","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/485","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Link."},"location":{"path":"src/pages/Leaderboard.tsx","start_line":10,"end_line":10,"start_column":1,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/485/instances","dismissal_approved_by":null},{"number":484,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/484","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/484","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Calendar, CheckCircle, ChevronDown, ExternalLink, Filter, Share2, Target, TrendingUp, User, X."},"location":{"path":"src/pages/Leaderboard.tsx","start_line":3,"end_line":7,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/484/instances","dismissal_approved_by":null},{"number":483,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/483","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/483","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable eventDescription."},"location":{"path":"src/pages/EventDetails.tsx","start_line":409,"end_line":409,"start_column":11,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/483/instances","dismissal_approved_by":null},{"number":482,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/482","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/482","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable abortControllerRef."},"location":{"path":"src/pages/EventDetails.tsx","start_line":32,"end_line":32,"start_column":9,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/482/instances","dismissal_approved_by":null},{"number":481,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/481","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/481","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/EventDetails.tsx","start_line":15,"end_line":15,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/481/instances","dismissal_approved_by":null},{"number":480,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/480","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/480","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports DollarSign, Globe, Mail."},"location":{"path":"src/pages/EventDetails.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":160},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/480/instances","dismissal_approved_by":null},{"number":479,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/479","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/479","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/pages/ForgotPassword.tsx","start_line":34,"end_line":34,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/479/instances","dismissal_approved_by":null},{"number":478,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/478","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/478","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Clock, Filter, Star."},"location":{"path":"src/pages/Events.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":112},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/478/instances","dismissal_approved_by":null},{"number":477,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/477","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/477","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getMembershipPlans_REMOVED."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":117,"end_line":117,"start_column":9,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/477/instances","dismissal_approved_by":null},{"number":476,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/476","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/476","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable membershipPlanInfo."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":108,"end_line":108,"start_column":9,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/476/instances","dismissal_approved_by":null},{"number":475,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/475","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/475","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showPasswordReset."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":77,"end_line":77,"start_column":10,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/475/instances","dismissal_approved_by":null},{"number":474,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/474","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/474","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable teams."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":75,"end_line":75,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/474/instances","dismissal_approved_by":null},{"number":473,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/473","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/473","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Clock, Download, EyeOff, FileText, History, Settings, Trash2, TrendingUp, UserCheck."},"location":{"path":"src/pages/EditUserEnhanced.tsx","start_line":3,"end_line":9,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/473/instances","dismissal_approved_by":null},{"number":472,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/472","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/472","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Users."},"location":{"path":"src/pages/EventResults.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/472/instances","dismissal_approved_by":null},{"number":471,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/471","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/471","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable updateResult."},"location":{"path":"src/pages/EditEvent.tsx","start_line":404,"end_line":404,"start_column":21,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/471/instances","dismissal_approved_by":null},{"number":470,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/470","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/470","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isCheckingFields."},"location":{"path":"src/pages/EditUser.tsx","start_line":44,"end_line":44,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/470/instances","dismissal_approved_by":null},{"number":469,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/469","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/469","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable hasNewFields."},"location":{"path":"src/pages/EditUser.tsx","start_line":43,"end_line":43,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/469/instances","dismissal_approved_by":null},{"number":468,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/468","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/468","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Calendar, Edit, Globe, Mail, Phone, Trash2."},"location":{"path":"src/pages/DirectoryManager.tsx","start_line":2,"end_line":6,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/468/instances","dismissal_approved_by":null},{"number":467,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/467","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/467","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable podiums."},"location":{"path":"src/pages/Dashboard.tsx","start_line":683,"end_line":683,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/467/instances","dismissal_approved_by":null},{"number":466,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/466","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/466","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable wins."},"location":{"path":"src/pages/Dashboard.tsx","start_line":682,"end_line":682,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/466/instances","dismissal_approved_by":null},{"number":465,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/465","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/465","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable classes."},"location":{"path":"src/pages/Dashboard.tsx","start_line":178,"end_line":178,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/465/instances","dismissal_approved_by":null},{"number":464,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/464","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/464","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoadingCompetitions."},"location":{"path":"src/pages/Dashboard.tsx","start_line":176,"end_line":176,"start_column":10,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/464/instances","dismissal_approved_by":null},{"number":463,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/463","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/463","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable competitionData."},"location":{"path":"src/pages/Dashboard.tsx","start_line":168,"end_line":168,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/463/instances","dismissal_approved_by":null},{"number":462,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/462","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/462","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setWidgets."},"location":{"path":"src/pages/Dashboard.tsx","start_line":165,"end_line":165,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/462/instances","dismissal_approved_by":null},{"number":461,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/461","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/461","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable widgets."},"location":{"path":"src/pages/Dashboard.tsx","start_line":165,"end_line":165,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/461/instances","dismissal_approved_by":null},{"number":460,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/460","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/460","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable error."},"location":{"path":"src/pages/Dashboard.tsx","start_line":164,"end_line":164,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/460/instances","dismissal_approved_by":null},{"number":459,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/459","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/459","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/Dashboard.tsx","start_line":149,"end_line":149,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/459/instances","dismissal_approved_by":null},{"number":458,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/458","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/458","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Legend, Line, LineChart."},"location":{"path":"src/pages/Dashboard.tsx","start_line":21,"end_line":24,"start_column":1,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/458/instances","dismissal_approved_by":null},{"number":457,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/457","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/457","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import formatDate."},"location":{"path":"src/pages/Dashboard.tsx","start_line":20,"end_line":20,"start_column":1,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/457/instances","dismissal_approved_by":null},{"number":456,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/456","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/456","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ActivityLogger."},"location":{"path":"src/pages/Dashboard.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/456/instances","dismissal_approved_by":null},{"number":455,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/455","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/455","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import DashboardWidgets."},"location":{"path":"src/pages/Dashboard.tsx","start_line":12,"end_line":12,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/455/instances","dismissal_approved_by":null},{"number":454,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/454","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/454","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BarChart3, Clock, DollarSign."},"location":{"path":"src/pages/Dashboard.tsx","start_line":2,"end_line":8,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/454/instances","dismissal_approved_by":null},{"number":453,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/453","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/453","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable types."},"location":{"path":"src/pages/Directory.tsx","start_line":283,"end_line":283,"start_column":9,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/453/instances","dismissal_approved_by":null},{"number":452,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/452","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/452","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable locations."},"location":{"path":"src/pages/Directory.tsx","start_line":282,"end_line":282,"start_column":9,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/452/instances","dismissal_approved_by":null},{"number":451,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/451","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/451","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable currentFilters."},"location":{"path":"src/pages/Directory.tsx","start_line":53,"end_line":53,"start_column":10,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/451/instances","dismissal_approved_by":null},{"number":450,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/450","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/450","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSelectedLocation."},"location":{"path":"src/pages/Directory.tsx","start_line":46,"end_line":46,"start_column":28,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/450/instances","dismissal_approved_by":null},{"number":449,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/449","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/449","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedLocation."},"location":{"path":"src/pages/Directory.tsx","start_line":46,"end_line":46,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/449/instances","dismissal_approved_by":null},{"number":448,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/448","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/448","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSelectedType."},"location":{"path":"src/pages/Directory.tsx","start_line":45,"end_line":45,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/448/instances","dismissal_approved_by":null},{"number":447,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/447","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/447","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedType."},"location":{"path":"src/pages/Directory.tsx","start_line":45,"end_line":45,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/447/instances","dismissal_approved_by":null},{"number":446,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/446","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/446","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSearchTerm."},"location":{"path":"src/pages/Directory.tsx","start_line":44,"end_line":44,"start_column":22,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/446/instances","dismissal_approved_by":null},{"number":445,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/445","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/445","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable searchTerm."},"location":{"path":"src/pages/Directory.tsx","start_line":44,"end_line":44,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/445/instances","dismissal_approved_by":null},{"number":444,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/444","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/444","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable podiums."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":424,"end_line":424,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/444/instances","dismissal_approved_by":null},{"number":443,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/443","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/443","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable wins."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":423,"end_line":423,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/443/instances","dismissal_approved_by":null},{"number":442,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/442","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/442","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports DollarSign, Filter, Heart, Search, Wrench."},"location":{"path":"src/pages/Directory.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":126},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/442/instances","dismissal_approved_by":null},{"number":441,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/441","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/441","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoadingCompetitions."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":160,"end_line":160,"start_column":10,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/441/instances","dismissal_approved_by":null},{"number":440,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/440","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/440","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable competitionData."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":152,"end_line":152,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/440/instances","dismissal_approved_by":null},{"number":439,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/439","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/439","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setWidgets."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":149,"end_line":149,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/439/instances","dismissal_approved_by":null},{"number":438,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/438","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/438","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable widgets."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":149,"end_line":149,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/438/instances","dismissal_approved_by":null},{"number":437,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/437","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/437","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable error."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":148,"end_line":148,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/437/instances","dismissal_approved_by":null},{"number":436,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/436","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/436","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":134,"end_line":134,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/436/instances","dismissal_approved_by":null},{"number":435,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/435","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/435","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable podiums."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":416,"end_line":416,"start_column":13,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/435/instances","dismissal_approved_by":null},{"number":434,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/434","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/434","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable wins."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":415,"end_line":415,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/434/instances","dismissal_approved_by":null},{"number":433,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/433","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/433","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Legend, Line, LineChart."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":20,"end_line":23,"start_column":1,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/433/instances","dismissal_approved_by":null},{"number":432,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/432","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/432","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import formatDate."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":19,"end_line":19,"start_column":1,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/432/instances","dismissal_approved_by":null},{"number":431,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/431","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/431","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ActivityLogger."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/431/instances","dismissal_approved_by":null},{"number":430,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/430","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/430","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import DashboardWidgets."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":12,"end_line":12,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/430/instances","dismissal_approved_by":null},{"number":429,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/429","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/429","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BarChart3, ChevronRight, Clock, DollarSign, Heart, TrendingUp, Users."},"location":{"path":"src/pages/Dashboard.restored.tsx","start_line":2,"end_line":8,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/429/instances","dismissal_approved_by":null},{"number":428,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/428","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/428","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoadingCompetitions."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":156,"end_line":156,"start_column":10,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/428/instances","dismissal_approved_by":null},{"number":427,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/427","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/427","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable competitionData."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":148,"end_line":148,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/427/instances","dismissal_approved_by":null},{"number":426,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/426","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/426","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setWidgets."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":145,"end_line":145,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/426/instances","dismissal_approved_by":null},{"number":425,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/425","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/425","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable widgets."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":145,"end_line":145,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/425/instances","dismissal_approved_by":null},{"number":424,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/424","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/424","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable error."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":144,"end_line":144,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/424/instances","dismissal_approved_by":null},{"number":423,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/423","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/423","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":130,"end_line":130,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/423/instances","dismissal_approved_by":null},{"number":422,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/422","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/422","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Legend, Line, LineChart."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":20,"end_line":23,"start_column":1,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/422/instances","dismissal_approved_by":null},{"number":421,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/421","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/421","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import formatDate."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":19,"end_line":19,"start_column":1,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/421/instances","dismissal_approved_by":null},{"number":420,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/420","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/420","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ActivityLogger."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/420/instances","dismissal_approved_by":null},{"number":419,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/419","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/419","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import DashboardWidgets."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":12,"end_line":12,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/419/instances","dismissal_approved_by":null},{"number":418,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/418","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/418","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BarChart3, Clock, DollarSign, TrendingUp."},"location":{"path":"src/pages/Dashboard-Original.tsx","start_line":2,"end_line":8,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/418/instances","dismissal_approved_by":null},{"number":417,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/417","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/417","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getActionColor."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":459,"end_line":459,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/417/instances","dismissal_approved_by":null},{"number":416,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/416","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/416","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getPlacementColor."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":452,"end_line":452,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/416/instances","dismissal_approved_by":null},{"number":415,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/415","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/415","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable formatDateShort."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":444,"end_line":444,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/415/instances","dismissal_approved_by":null},{"number":414,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/414","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/414","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable quickActions."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":412,"end_line":412,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/414/instances","dismissal_approved_by":null},{"number":413,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/413","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/413","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setEventFormData."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":66,"end_line":66,"start_column":25,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/413/instances","dismissal_approved_by":null},{"number":412,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/412","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/412","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable eventFormData."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":66,"end_line":66,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/412/instances","dismissal_approved_by":null},{"number":411,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/411","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/411","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoadingCompetitions."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":65,"end_line":65,"start_column":10,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/411/instances","dismissal_approved_by":null},{"number":410,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/410","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/410","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setEditingResult."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":64,"end_line":64,"start_column":25,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/410/instances","dismissal_approved_by":null},{"number":409,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/409","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/409","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable editingResult."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":64,"end_line":64,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/409/instances","dismissal_approved_by":null},{"number":408,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/408","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/408","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setShowLogEventModal."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":63,"end_line":63,"start_column":29,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/408/instances","dismissal_approved_by":null},{"number":407,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/407","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/407","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showLogEventModal."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":63,"end_line":63,"start_column":10,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/407/instances","dismissal_approved_by":null},{"number":406,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/406","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/406","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setShowLogCAEEventModal."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":62,"end_line":62,"start_column":32,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/406/instances","dismissal_approved_by":null},{"number":405,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/405","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/405","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showLogCAEEventModal."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":62,"end_line":62,"start_column":10,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/405/instances","dismissal_approved_by":null},{"number":404,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/404","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/404","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable competitionResults."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":61,"end_line":61,"start_column":10,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/404/instances","dismissal_approved_by":null},{"number":403,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/403","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/403","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable competitionData."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":46,"end_line":46,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/403/instances","dismissal_approved_by":null},{"number":402,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/402","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/402","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable subscription."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":45,"end_line":45,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/402/instances","dismissal_approved_by":null},{"number":401,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/401","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/401","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable recentResults."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":42,"end_line":42,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/401/instances","dismissal_approved_by":null},{"number":400,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/400","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/400","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable upcomingEvents."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":41,"end_line":41,"start_column":10,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/400/instances","dismissal_approved_by":null},{"number":399,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/399","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/399","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable stats."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":33,"end_line":33,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/399/instances","dismissal_approved_by":null},{"number":398,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/398","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/398","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":29,"end_line":29,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/398/instances","dismissal_approved_by":null},{"number":397,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/397","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/397","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import LogCAEEventModal."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":23,"end_line":23,"start_column":1,"end_column":63},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/397/instances","dismissal_approved_by":null},{"number":396,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/396","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/396","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Bar, BarChart, CartesianGrid, Cell, Legend, Line, LineChart, Pie, PieChart, ResponsiveContainer, Tooltip, XAxis, YAxis."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":19,"end_line":22,"start_column":1,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/396/instances","dismissal_approved_by":null},{"number":395,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/395","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/395","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Subscription."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":18,"end_line":18,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/395/instances","dismissal_approved_by":null},{"number":394,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/394","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/394","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import SavedEvents."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":17,"end_line":17,"start_column":1,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/394/instances","dismissal_approved_by":null},{"number":393,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/393","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/393","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ActivityLogger."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/393/instances","dismissal_approved_by":null},{"number":392,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/392","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/392","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports DashboardWidgets, Widget."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":12,"end_line":12,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/392/instances","dismissal_approved_by":null},{"number":391,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/391","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/391","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Activity, ArrowRight, Award, BarChart3, Bell, CheckCircle, ChevronRight, Clock, Crown, DollarSign, Edit, FileText, Heart, LogOut, MapPin, Package, Plus, Save, Star, Target, TrendingUp, Users."},"location":{"path":"src/pages/Dashboard.broken.tsx","start_line":2,"end_line":8,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/391/instances","dismissal_approved_by":null},{"number":390,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/390","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/390","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Building, CheckCircle, Clock, DollarSign, Globe, Mail, MapPin, Package, Phone, Upload, Users."},"location":{"path":"src/pages/CreateDirectoryListing.tsx","start_line":2,"end_line":6,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/390/instances","dismissal_approved_by":null},{"number":389,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/389","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/389","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getPageTypeFromSlug."},"location":{"path":"src/pages/CMSPages.tsx","start_line":416,"end_line":416,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/389/instances","dismissal_approved_by":null},{"number":388,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/388","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/388","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Globe."},"location":{"path":"src/pages/CMSPages.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":113},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/388/instances","dismissal_approved_by":null},{"number":387,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/387","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/387","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/pages/CompetitionManagement.tsx","start_line":211,"end_line":211,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/387/instances","dismissal_approved_by":null},{"number":386,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/386","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/386","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import PageHeader."},"location":{"path":"src/pages/CompetitionManagement.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/386/instances","dismissal_approved_by":null},{"number":385,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/385","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/385","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/ClaimOrganization.tsx","start_line":7,"end_line":7,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/385/instances","dismissal_approved_by":null},{"number":384,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/384","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/384","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Check, Star."},"location":{"path":"src/pages/BusinessPricing.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":85},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/384/instances","dismissal_approved_by":null},{"number":383,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/383","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/383","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import AudioComponent."},"location":{"path":"src/pages/AudioSystemDesigner.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":119},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/383/instances","dismissal_approved_by":null},{"number":382,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/382","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/382","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Plus, Save, Trash2."},"location":{"path":"src/pages/AudioSystemDesigner.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":87},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/382/instances","dismissal_approved_by":null},{"number":381,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/381","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/381","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSortDirection."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":86,"end_line":86,"start_column":25,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/381/instances","dismissal_approved_by":null},{"number":380,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/380","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/380","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSortField."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":85,"end_line":85,"start_column":21,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/380/instances","dismissal_approved_by":null},{"number":379,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/379","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/379","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setCurrentPage."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":84,"end_line":84,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/379/instances","dismissal_approved_by":null},{"number":378,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/378","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/378","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable totalPages."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":83,"end_line":83,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/378/instances","dismissal_approved_by":null},{"number":377,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/377","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/377","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSelectedUser."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":76,"end_line":76,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/377/instances","dismissal_approved_by":null},{"number":376,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/376","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/376","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedUser."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":76,"end_line":76,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/376/instances","dismissal_approved_by":null},{"number":375,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/375","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/375","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showWarning."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":71,"end_line":71,"start_column":35,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/375/instances","dismissal_approved_by":null},{"number":374,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/374","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/374","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Globe, Save."},"location":{"path":"src/pages/AdminUsers.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":201},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/374/instances","dismissal_approved_by":null},{"number":373,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/373","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/373","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Clock, Settings."},"location":{"path":"src/pages/AnalyticsSettings.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":89},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/373/instances","dismissal_approved_by":null},{"number":372,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/372","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/372","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleDeleteTeam."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":720,"end_line":720,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/372/instances","dismissal_approved_by":null},{"number":371,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/371","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/371","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleDuplicatePlan."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":637,"end_line":637,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/371/instances","dismissal_approved_by":null},{"number":370,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/370","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/370","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleBulkToggleStatus."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":619,"end_line":619,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/370/instances","dismissal_approved_by":null},{"number":369,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/369","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/369","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleBulkDelete."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":600,"end_line":600,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/369/instances","dismissal_approved_by":null},{"number":368,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/368","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/368","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable togglePlanSelection."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":592,"end_line":592,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/368/instances","dismissal_approved_by":null},{"number":367,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/367","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/367","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import MapPin."},"location":{"path":"src/pages/AdvertisePage.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":168},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/367/instances","dismissal_approved_by":null},{"number":366,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/366","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/366","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setDefaultPermissions."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":145,"end_line":145,"start_column":30,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/366/instances","dismissal_approved_by":null},{"number":365,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/365","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/365","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showBulkActions."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":101,"end_line":101,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/365/instances","dismissal_approved_by":null},{"number":364,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/364","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/364","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable teamToDelete."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":95,"end_line":95,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/364/instances","dismissal_approved_by":null},{"number":363,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/363","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/363","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable session."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":82,"end_line":82,"start_column":17,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/363/instances","dismissal_approved_by":null},{"number":362,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/362","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/362","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Calendar, Mail."},"location":{"path":"src/pages/AdminMembership.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":234},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/362/instances","dismissal_approved_by":null},{"number":361,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/361","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/361","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable validateKey."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":340,"end_line":340,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/361/instances","dismissal_approved_by":null},{"number":360,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/360","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/360","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getKeyDescription."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":324,"end_line":324,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/360/instances","dismissal_approved_by":null},{"number":359,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/359","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/359","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleSave."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":292,"end_line":292,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/359/instances","dismissal_approved_by":null},{"number":358,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/358","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/358","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable toggleSecretVisibility."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":285,"end_line":285,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/358/instances","dismissal_approved_by":null},{"number":357,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/357","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/357","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable validateWebhookEndpoint."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":255,"end_line":255,"start_column":9,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/357/instances","dismissal_approved_by":null},{"number":356,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/356","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/356","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testStripeConnection."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":229,"end_line":229,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/356/instances","dismissal_approved_by":null},{"number":355,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/355","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/355","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleBooleanChange."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":222,"end_line":222,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/355/instances","dismissal_approved_by":null},{"number":354,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/354","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/354","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleInputChange."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":215,"end_line":215,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/354/instances","dismissal_approved_by":null},{"number":353,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/353","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/353","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable updateDebugMode."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":189,"end_line":189,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/353/instances","dismissal_approved_by":null},{"number":351,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/351","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/351","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable debugModeEnabled."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":70,"end_line":70,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/351/instances","dismissal_approved_by":null},{"number":350,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/350","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/350","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setEditingSubscriber."},"location":{"path":"src/pages/AdminNewsletterManager.tsx","start_line":70,"end_line":70,"start_column":29,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/350/instances","dismissal_approved_by":null},{"number":349,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/349","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/349","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable editingSubscriber."},"location":{"path":"src/pages/AdminNewsletterManager.tsx","start_line":70,"end_line":70,"start_column":10,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/349/instances","dismissal_approved_by":null},{"number":348,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/348","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/348","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable saveStatus."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":68,"end_line":68,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/348/instances","dismissal_approved_by":null},{"number":347,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/347","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/347","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoading."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":67,"end_line":67,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/347/instances","dismissal_approved_by":null},{"number":346,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/346","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/346","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showSecrets."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":66,"end_line":66,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/346/instances","dismissal_approved_by":null},{"number":345,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/345","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/345","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable processingEmail."},"location":{"path":"src/pages/AdminNewsletterManager.tsx","start_line":68,"end_line":68,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/345/instances","dismissal_approved_by":null},{"number":344,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/344","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/344","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable availableTags."},"location":{"path":"src/pages/AdminNewsletterManager.tsx","start_line":67,"end_line":67,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/344/instances","dismissal_approved_by":null},{"number":343,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/343","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/343","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSelectedTags."},"location":{"path":"src/pages/AdminNewsletterManager.tsx","start_line":66,"end_line":66,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/343/instances","dismissal_approved_by":null},{"number":342,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/342","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/342","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ServiceWorkerManager."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":7,"end_line":7,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/342/instances","dismissal_approved_by":null},{"number":341,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/341","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/341","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, CheckCircle, Clock, ExternalLink, Eye, EyeOff, Key, Save, Shield, TestTube."},"location":{"path":"src/pages/AdminSettings.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":170},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/341/instances","dismissal_approved_by":null},{"number":340,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/340","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/340","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Edit, Shield."},"location":{"path":"src/pages/AdminTeams.tsx","start_line":2,"end_line":16,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/340/instances","dismissal_approved_by":null},{"number":339,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/339","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/339","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, Calendar, Filter, MousePointer, Tag."},"location":{"path":"src/pages/AdminNewsletterManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":181},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/339/instances","dismissal_approved_by":null},{"number":338,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/338","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/338","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports FaEdit, FaEnvelope, FaExclamationTriangle, FaImage, FaTrash."},"location":{"path":"src/pages/AdminMemberProfiles.tsx","start_line":4,"end_line":7,"start_column":1,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/338/instances","dismissal_approved_by":null},{"number":337,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/337","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/337","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports scrollToRef, useAutoFocusFirstInput, useAutoScrollToForm."},"location":{"path":"src/pages/AdminEvents.tsx","start_line":8,"end_line":8,"start_column":1,"end_column":96},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/337/instances","dismissal_approved_by":null},{"number":336,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/336","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/336","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, Plus."},"location":{"path":"src/pages/AdminEvents.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":157},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/336/instances","dismissal_approved_by":null},{"number":335,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/335","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/335","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BarChart3, Calendar, Clock, CreditCard, Database, DollarSign, FileText, Mail, Shield, Tag, Target, TrendingUp, Users."},"location":{"path":"src/pages/AdminBillingConfiguration.tsx","start_line":4,"end_line":31,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/335/instances","dismissal_approved_by":null},{"number":334,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/334","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/334","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getActivityColor."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":238,"end_line":238,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/334/instances","dismissal_approved_by":null},{"number":333,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/333","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/333","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getActivityIcon."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":217,"end_line":217,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/333/instances","dismissal_approved_by":null},{"number":332,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/332","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/332","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable formatDate."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":208,"end_line":208,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/332/instances","dismissal_approved_by":null},{"number":331,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/331","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/331","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable processingAction."},"location":{"path":"src/pages/AdminBilling.tsx","start_line":448,"end_line":448,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/331/instances","dismissal_approved_by":null},{"number":330,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/330","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/330","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable ticketsData."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":105,"end_line":105,"start_column":21,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/330/instances","dismissal_approved_by":null},{"number":329,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/329","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/329","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable revenueResult."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":72,"end_line":72,"start_column":41,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/329/instances","dismissal_approved_by":null},{"number":328,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/328","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/328","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoading."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":56,"end_line":56,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/328/instances","dismissal_approved_by":null},{"number":327,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/327","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/327","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable recentActivity."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":55,"end_line":55,"start_column":10,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/327/instances","dismissal_approved_by":null},{"number":326,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/326","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/326","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ServiceWorkerManager."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":10,"end_line":10,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/326/instances","dismissal_approved_by":null},{"number":325,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/325","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/325","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import AdminNavigation."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":8,"end_line":8,"start_column":1,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/325/instances","dismissal_approved_by":null},{"number":324,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/324","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/324","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Navigate."},"location":{"path":"src/pages/AdminDashboard.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/324/instances","dismissal_approved_by":null},{"number":323,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/323","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/323","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Activity, Ban, ChevronDown, ChevronUp, CreditCard, Eye, FileText, Filter, Package, RefreshCw, Tag, TrendingUp."},"location":{"path":"src/pages/AdminBilling.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":238},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/323/instances","dismissal_approved_by":null},{"number":322,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/322","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/322","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Target."},"location":{"path":"src/pages/AdminAnalytics.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":163},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/322/instances","dismissal_approved_by":null},{"number":321,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/321","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/321","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleSizeChange."},"location":{"path":"src/pages/AdManagement.tsx","start_line":733,"end_line":733,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/321/instances","dismissal_approved_by":null},{"number":320,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/320","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/320","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable resetWritingConnection."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":838,"end_line":838,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/320/instances","dismissal_approved_by":null},{"number":319,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/319","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/319","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable writingConnectionErrors."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":183,"end_line":183,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/319/instances","dismissal_approved_by":null},{"number":318,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/318","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/318","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable writingConnectionStatus."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":182,"end_line":182,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/318/instances","dismissal_approved_by":null},{"number":317,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/317","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/317","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setTestMessage."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":133,"end_line":133,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/317/instances","dismissal_approved_by":null},{"number":316,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/316","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/316","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testMessage."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":133,"end_line":133,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/316/instances","dismissal_approved_by":null},{"number":315,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/315","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/315","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setTestStatus."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":132,"end_line":132,"start_column":22,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/315/instances","dismissal_approved_by":null},{"number":314,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/314","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/314","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testStatus."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":132,"end_line":132,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/314/instances","dismissal_approved_by":null},{"number":313,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/313","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/313","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports ExternalLink, Eye, ImageIcon, MapPin, Tag, Upload."},"location":{"path":"src/pages/AdManagement.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":274},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/313/instances","dismissal_approved_by":null},{"number":312,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/312","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/312","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable connectionStatus."},"location":{"path":"src/pages/AIConfigurationOriginal.tsx","start_line":124,"end_line":124,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/312/instances","dismissal_approved_by":null},{"number":311,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/311","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/311","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable resetWritingConnection."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":949,"end_line":949,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/311/instances","dismissal_approved_by":null},{"number":310,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/310","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/310","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable resetWritingConnection."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":838,"end_line":838,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/310/instances","dismissal_approved_by":null},{"number":309,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/309","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/309","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable writingConnectionErrors."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":183,"end_line":183,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/309/instances","dismissal_approved_by":null},{"number":308,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/308","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/308","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable writingConnectionStatus."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":182,"end_line":182,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/308/instances","dismissal_approved_by":null},{"number":307,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/307","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/307","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setTestMessage."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":133,"end_line":133,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/307/instances","dismissal_approved_by":null},{"number":306,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/306","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/306","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testMessage."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":133,"end_line":133,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/306/instances","dismissal_approved_by":null},{"number":305,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/305","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/305","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setTestStatus."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":132,"end_line":132,"start_column":22,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/305/instances","dismissal_approved_by":null},{"number":304,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/304","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/304","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testStatus."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":132,"end_line":132,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/304/instances","dismissal_approved_by":null},{"number":303,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/303","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/303","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable connectionStatus."},"location":{"path":"src/pages/AIConfiguration.backup.tsx","start_line":124,"end_line":124,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/303/instances","dismissal_approved_by":null},{"number":302,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/302","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/302","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable writingConnectionErrors."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":204,"end_line":204,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/302/instances","dismissal_approved_by":null},{"number":301,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/301","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/301","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable writingConnectionStatus."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":203,"end_line":203,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/301/instances","dismissal_approved_by":null},{"number":300,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/300","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/300","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setTestMessage."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":154,"end_line":154,"start_column":23,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/300/instances","dismissal_approved_by":null},{"number":299,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/299","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/299","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testMessage."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":154,"end_line":154,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/299/instances","dismissal_approved_by":null},{"number":298,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/298","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/298","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setTestStatus."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":153,"end_line":153,"start_column":22,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/298/instances","dismissal_approved_by":null},{"number":297,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/297","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/297","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testStatus."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":153,"end_line":153,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/297/instances","dismissal_approved_by":null},{"number":296,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/296","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/296","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable connectionStatus."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":145,"end_line":145,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/296/instances","dismissal_approved_by":null},{"number":295,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/295","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/295","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Database, Loader2, Shield."},"location":{"path":"src/pages/AIConfiguration.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":238},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/295/instances","dismissal_approved_by":null},{"number":294,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/294","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/294","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setWritingConfigs."},"location":{"path":"src/pages/AIConfigurationFixed.tsx","start_line":39,"end_line":39,"start_column":26,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/294/instances","dismissal_approved_by":null},{"number":293,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/293","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/293","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable writingConfigs."},"location":{"path":"src/pages/AIConfigurationFixed.tsx","start_line":39,"end_line":39,"start_column":10,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/293/instances","dismissal_approved_by":null},{"number":292,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/292","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/292","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/pages/AIConfigurationFixed.tsx","start_line":26,"end_line":26,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/292/instances","dismissal_approved_by":null},{"number":291,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/291","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/291","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports DollarSign, Key."},"location":{"path":"src/pages/AIConfigurationFixed.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":161},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/291/instances","dismissal_approved_by":null},{"number":290,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/290","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/290","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/modules/support-desk/components/user/TicketDetail.tsx","start_line":16,"end_line":16,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/290/instances","dismissal_approved_by":null},{"number":289,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/289","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/289","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/modules/support-desk/components/public/PublicSupportForm.tsx","start_line":295,"end_line":295,"start_column":17,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/289/instances","dismissal_approved_by":null},{"number":288,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/288","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/288","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable settings."},"location":{"path":"src/modules/support-desk/components/organization/OrgSupportSettings.tsx","start_line":9,"end_line":9,"start_column":10,"end_column":18},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/288/instances","dismissal_approved_by":null},{"number":287,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/287","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/287","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import UserPlus."},"location":{"path":"src/modules/support-desk/components/admin/OrganizationManagement.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/287/instances","dismissal_approved_by":null},{"number":286,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/286","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/286","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ChevronDown."},"location":{"path":"src/modules/support-desk/components/admin/AdminTicketList.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":101},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/286/instances","dismissal_approved_by":null},{"number":285,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/285","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/285","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable navigate."},"location":{"path":"src/modules/support-desk/components/admin/AdminTicketDetailWrapper.tsx","start_line":12,"end_line":12,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/285/instances","dismissal_approved_by":null},{"number":284,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/284","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/284","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import messageService."},"location":{"path":"src/modules/support-desk/components/admin/AdminTicketDetailWrapper.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/284/instances","dismissal_approved_by":null},{"number":283,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/283","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/283","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import RateLimitConfigs."},"location":{"path":"src/middleware/resource-authorization.ts","start_line":12,"end_line":12,"start_column":1,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/283/instances","dismissal_approved_by":null},{"number":282,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/282","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/282","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import AuthMiddleware."},"location":{"path":"src/middleware/resource-authorization.ts","start_line":10,"end_line":10,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/282/instances","dismissal_approved_by":null},{"number":281,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/281","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/281","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import AuthMiddleware."},"location":{"path":"src/middleware/permission-guards.ts","start_line":9,"end_line":9,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/281/instances","dismissal_approved_by":null},{"number":280,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/280","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/280","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable key."},"location":{"path":"src/middleware/audit-security.ts","start_line":664,"end_line":664,"start_column":11,"end_column":14},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/280/instances","dismissal_approved_by":null},{"number":279,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/279","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/279","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import addCSRFHeader."},"location":{"path":"src/middleware/auth-middleware.ts","start_line":12,"end_line":12,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/279/instances","dismissal_approved_by":null},{"number":278,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/278","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/278","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import createRateLimitHeaders."},"location":{"path":"src/middleware/auth-middleware.ts","start_line":9,"end_line":9,"start_column":1,"end_column":89},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/278/instances","dismissal_approved_by":null},{"number":277,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/277","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/277","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import IdValidators."},"location":{"path":"src/middleware/endpoint-protection.ts","start_line":15,"end_line":15,"start_column":1,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/277/instances","dismissal_approved_by":null},{"number":276,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/276","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/276","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ResourceAuthHelpers."},"location":{"path":"src/middleware/endpoint-protection.ts","start_line":8,"end_line":13,"start_column":1,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/276/instances","dismissal_approved_by":null},{"number":275,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/275","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/275","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import createClient."},"location":{"path":"src/middleware/audit-security.ts","start_line":9,"end_line":9,"start_column":1,"end_column":54},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/275/instances","dismissal_approved_by":null},{"number":274,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/274","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/274","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable query."},"location":{"path":"src/mcp/server.ts","start_line":509,"end_line":509,"start_column":11,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/274/instances","dismissal_approved_by":null},{"number":273,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/273","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/273","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable query."},"location":{"path":"src/mcp/server.ts","start_line":395,"end_line":395,"start_column":11,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/273/instances","dismissal_approved_by":null},{"number":272,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/272","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/272","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable query."},"location":{"path":"src/mcp/server.ts","start_line":342,"end_line":342,"start_column":11,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/272/instances","dismissal_approved_by":null},{"number":271,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/271","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/271","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable query."},"location":{"path":"src/mcp/server.ts","start_line":246,"end_line":246,"start_column":11,"end_column":16},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/271/instances","dismissal_approved_by":null},{"number":270,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/270","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/270","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable BACKUP_REQUIRED_OPERATIONS."},"location":{"path":"src/mcp/server.ts","start_line":31,"end_line":31,"start_column":7,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/270/instances","dismissal_approved_by":null},{"number":269,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/269","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/269","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable subTest."},"location":{"path":"src/mcp/investigate-security-issues.ts","start_line":192,"end_line":192,"start_column":19,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/269/instances","dismissal_approved_by":null},{"number":268,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/268","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/268","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable payTest."},"location":{"path":"src/mcp/investigate-security-issues.ts","start_line":180,"end_line":180,"start_column":19,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/268/instances","dismissal_approved_by":null},{"number":267,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/267","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/267","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable compTest."},"location":{"path":"src/mcp/investigate-security-issues.ts","start_line":168,"end_line":168,"start_column":19,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/267/instances","dismissal_approved_by":null},{"number":266,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/266","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/266","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable subTest."},"location":{"path":"src/mcp/investigate-security-issues-direct.ts","start_line":140,"end_line":140,"start_column":21,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/266/instances","dismissal_approved_by":null},{"number":265,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/265","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/265","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable payTest."},"location":{"path":"src/mcp/investigate-security-issues-direct.ts","start_line":124,"end_line":124,"start_column":21,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/265/instances","dismissal_approved_by":null},{"number":264,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/264","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/264","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable compTest."},"location":{"path":"src/mcp/investigate-security-issues-direct.ts","start_line":108,"end_line":108,"start_column":21,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/264/instances","dismissal_approved_by":null},{"number":263,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/263","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/263","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/mcp/execute-security-fixes.ts","start_line":235,"end_line":235,"start_column":17,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/263/instances","dismissal_approved_by":null},{"number":262,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/262","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/262","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable fix3Result."},"location":{"path":"src/mcp/execute-security-fixes.ts","start_line":108,"end_line":108,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/262/instances","dismissal_approved_by":null},{"number":261,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/261","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/261","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable fix2Result."},"location":{"path":"src/mcp/execute-security-fixes.ts","start_line":67,"end_line":67,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/261/instances","dismissal_approved_by":null},{"number":260,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/260","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/260","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable fix1Result."},"location":{"path":"src/mcp/execute-security-fixes.ts","start_line":25,"end_line":25,"start_column":19,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/260/instances","dismissal_approved_by":null},{"number":259,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/259","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/259","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable defaultData."},"location":{"path":"src/mcp/create-billing-config-tables.ts","start_line":251,"end_line":251,"start_column":19,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/259/instances","dismissal_approved_by":null},{"number":258,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/258","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/258","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable indexData."},"location":{"path":"src/mcp/create-billing-config-tables.ts","start_line":226,"end_line":226,"start_column":19,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/258/instances","dismissal_approved_by":null},{"number":257,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/257","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/257","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable campaignData."},"location":{"path":"src/mcp/create-billing-config-tables.ts","start_line":173,"end_line":173,"start_column":19,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/257/instances","dismissal_approved_by":null},{"number":256,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/256","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/256","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable dunningData."},"location":{"path":"src/mcp/create-billing-config-tables.ts","start_line":122,"end_line":122,"start_column":19,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/256/instances","dismissal_approved_by":null},{"number":255,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/255","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/255","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable billingRulesData."},"location":{"path":"src/mcp/create-billing-config-tables.ts","start_line":74,"end_line":74,"start_column":19,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/255/instances","dismissal_approved_by":null},{"number":254,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/254","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/254","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable proRateData."},"location":{"path":"src/mcp/create-billing-config-tables.ts","start_line":18,"end_line":18,"start_column":19,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/254/instances","dismissal_approved_by":null},{"number":253,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/253","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/253","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable standardOptions."},"location":{"path":"src/data/carAudioSubwooferDatabase.ts","start_line":3208,"end_line":3208,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/253/instances","dismissal_approved_by":null},{"number":252,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/252","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/252","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/contexts/AuthContext.tsx","start_line":900,"end_line":900,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/252/instances","dismissal_approved_by":null},{"number":251,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/251","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/251","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/contexts/SecureAuthContext.tsx","start_line":795,"end_line":795,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/251/instances","dismissal_approved_by":null},{"number":250,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/250","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/250","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable subsPerRow."},"location":{"path":"src/components/subwoofer/WiringDiagram.tsx","start_line":482,"end_line":482,"start_column":13,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/250/instances","dismissal_approved_by":null},{"number":249,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/249","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/249","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setPermissionsCache."},"location":{"path":"src/contexts/SecureAuthContext.tsx","start_line":100,"end_line":100,"start_column":28,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/249/instances","dismissal_approved_by":null},{"number":248,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/248","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/248","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setPermissionsCache."},"location":{"path":"src/contexts/AuthContext.tsx","start_line":74,"end_line":74,"start_column":28,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/248/instances","dismissal_approved_by":null},{"number":247,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/247","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/247","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable sessionConflictDetected."},"location":{"path":"src/contexts/AuthContext.tsx","start_line":72,"end_line":72,"start_column":10,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/247/instances","dismissal_approved_by":null},{"number":246,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/246","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/246","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLast."},"location":{"path":"src/components/subwoofer/WiringDiagram.tsx","start_line":340,"end_line":340,"start_column":19,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/246/instances","dismissal_approved_by":null},{"number":245,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/245","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/245","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isFirst."},"location":{"path":"src/components/subwoofer/WiringDiagram.tsx","start_line":339,"end_line":339,"start_column":19,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/245/instances","dismissal_approved_by":null},{"number":244,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/244","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/244","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable subsPerRow."},"location":{"path":"src/components/subwoofer/WiringDiagram.tsx","start_line":316,"end_line":316,"start_column":13,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/244/instances","dismissal_approved_by":null},{"number":243,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/243","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/243","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import calculateWiringOptions."},"location":{"path":"src/components/subwoofer/WiringDiagram.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":97},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/243/instances","dismissal_approved_by":null},{"number":242,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/242","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/242","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getColor."},"location":{"path":"src/components/ui/car-audio/SPLMeter.tsx","start_line":39,"end_line":39,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/242/instances","dismissal_approved_by":null},{"number":241,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/241","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/241","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Trophy."},"location":{"path":"src/components/ui/car-audio/EventCard.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":75},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/241/instances","dismissal_approved_by":null},{"number":240,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/240","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/240","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable availableImpedances."},"location":{"path":"src/components/subwoofer/SubwooferSelector.tsx","start_line":137,"end_line":137,"start_column":11,"end_column":30},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/240/instances","dismissal_approved_by":null},{"number":239,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/239","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/239","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Filter."},"location":{"path":"src/components/subwoofer/SavedDesigns.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":111},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/239/instances","dismissal_approved_by":null},{"number":238,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/238","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/238","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable calculateMinimumBoxSize."},"location":{"path":"src/components/subwoofer/BoxCalculator.tsx","start_line":144,"end_line":144,"start_column":9,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/238/instances","dismissal_approved_by":null},{"number":237,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/237","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/237","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable TUNING_RECOMMENDATIONS."},"location":{"path":"src/components/subwoofer/PortCalculator.tsx","start_line":47,"end_line":47,"start_column":7,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/237/instances","dismissal_approved_by":null},{"number":236,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/236","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/236","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Calculator."},"location":{"path":"src/components/subwoofer/CutSheetGenerator.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":111},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/236/instances","dismissal_approved_by":null},{"number":235,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/235","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/235","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setEditorContent."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":1099,"end_line":1099,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/235/instances","dismissal_approved_by":null},{"number":234,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/234","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/234","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getEditorContent."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":1092,"end_line":1092,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/234/instances","dismissal_approved_by":null},{"number":233,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/233","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/233","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable retryAllFailedEmails."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":1011,"end_line":1011,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/233/instances","dismissal_approved_by":null},{"number":232,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/232","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/232","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable deleteEmailQueue."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":973,"end_line":973,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/232/instances","dismissal_approved_by":null},{"number":231,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/231","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/231","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":938,"end_line":938,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/231/instances","dismissal_approved_by":null},{"number":230,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/230","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/230","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable sendPendingEmails."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":928,"end_line":928,"start_column":9,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/230/instances","dismissal_approved_by":null},{"number":229,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/229","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/229","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BoxIcon, Grid3x3, Layers."},"location":{"path":"src/components/subwoofer/Box3DVisualizationAdvanced.tsx","start_line":2,"end_line":18,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/229/instances","dismissal_approved_by":null},{"number":228,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/228","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/228","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":893,"end_line":893,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/228/instances","dismissal_approved_by":null},{"number":227,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/227","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/227","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable flushEmailQueue."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":883,"end_line":883,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/227/instances","dismissal_approved_by":null},{"number":226,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/226","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/226","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Download, Eye, EyeOff, Layers."},"location":{"path":"src/components/subwoofer/Box3DVisualizationSimple.tsx","start_line":2,"end_line":16,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/226/instances","dismissal_approved_by":null},{"number":225,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/225","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/225","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isCheckingRateLimit."},"location":{"path":"src/components/events/SuggestEventForm.tsx","start_line":94,"end_line":94,"start_column":10,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/225/instances","dismissal_approved_by":null},{"number":224,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/224","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/224","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable generatePreview."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":608,"end_line":608,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/224/instances","dismissal_approved_by":null},{"number":223,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/223","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/223","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable clearEmailQueue."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":587,"end_line":587,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/223/instances","dismissal_approved_by":null},{"number":222,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/222","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/222","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable retryFailedEmail."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":544,"end_line":544,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/222/instances","dismissal_approved_by":null},{"number":221,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/221","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/221","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import FileText."},"location":{"path":"src/components/events/SuggestEventForm.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":139},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/221/instances","dismissal_approved_by":null},{"number":220,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/220","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/220","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useEffect."},"location":{"path":"src/components/events/SuggestEventForm.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/220/instances","dismissal_approved_by":null},{"number":219,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/219","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/219","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setShowPassword."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":90,"end_line":90,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/219/instances","dismissal_approved_by":null},{"number":218,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/218","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/218","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showPassword."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":90,"end_line":90,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/218/instances","dismissal_approved_by":null},{"number":217,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/217","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/217","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable user."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":80,"end_line":80,"start_column":11,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/217/instances","dismissal_approved_by":null},{"number":216,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/216","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/216","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showInfo."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":79,"end_line":79,"start_column":48,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/216/instances","dismissal_approved_by":null},{"number":215,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/215","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/215","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showWarning."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":79,"end_line":79,"start_column":35,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/215/instances","dismissal_approved_by":null},{"number":214,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/214","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/214","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Building, Calendar, DollarSign, Eye, EyeOff, Mail, Pause, Play, Shield, Users, Zap."},"location":{"path":"src/components/admin-settings/EmailSettings.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":256},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/214/instances","dismissal_approved_by":null},{"number":213,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/213","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/213","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable validateKey."},"location":{"path":"src/components/admin-settings/StripeSettings.tsx","start_line":94,"end_line":94,"start_column":9,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/213/instances","dismissal_approved_by":null},{"number":212,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/212","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/212","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import LogOut."},"location":{"path":"src/components/admin-settings/SessionSettings.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":93},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/212/instances","dismissal_approved_by":null},{"number":211,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/211","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/211","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showWarning."},"location":{"path":"src/components/admin-settings/PaymentSettings.tsx","start_line":23,"end_line":23,"start_column":45,"end_column":56},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/211/instances","dismissal_approved_by":null},{"number":210,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/210","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/210","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setStats."},"location":{"path":"src/components/admin-settings/NotificationManager.tsx","start_line":33,"end_line":33,"start_column":17,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/210/instances","dismissal_approved_by":null},{"number":209,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/209","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/209","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable stats."},"location":{"path":"src/components/admin-settings/NotificationManager.tsx","start_line":33,"end_line":33,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/209/instances","dismissal_approved_by":null},{"number":208,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/208","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/208","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports User, Users."},"location":{"path":"src/components/admin-settings/NotificationManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":120},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/208/instances","dismissal_approved_by":null},{"number":207,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/207","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/207","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useEffect."},"location":{"path":"src/components/admin-settings/EmailTemplatesAccordion.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/207/instances","dismissal_approved_by":null},{"number":206,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/206","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/206","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import FileText."},"location":{"path":"src/components/admin-settings/EmailTemplateEditModal.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":79},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/206/instances","dismissal_approved_by":null},{"number":205,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/205","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/205","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Download, Eye, EyeOff, Trash2."},"location":{"path":"src/components/admin-settings/DebugSettings.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":119},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/205/instances","dismissal_approved_by":null},{"number":204,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/204","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/204","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Calendar, CheckCircle."},"location":{"path":"src/components/admin-settings/CronSettings.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":111},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/204/instances","dismissal_approved_by":null},{"number":203,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/203","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/203","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable updateFeatureLimits."},"location":{"path":"src/components/admin/PermissionManager.tsx","start_line":123,"end_line":123,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/203/instances","dismissal_approved_by":null},{"number":202,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/202","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/202","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedCategory."},"location":{"path":"src/components/admin/PermissionManager.tsx","start_line":62,"end_line":62,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/202/instances","dismissal_approved_by":null},{"number":201,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/201","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/201","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BarChart, Clock, DollarSign, Trash2."},"location":{"path":"src/components/admin/PermissionManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":213},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/201/instances","dismissal_approved_by":null},{"number":200,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/200","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/200","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable filteredSubFeatures."},"location":{"path":"src/components/admin/TieredPermissionManager.tsx","start_line":194,"end_line":194,"start_column":9,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/200/instances","dismissal_approved_by":null},{"number":199,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/199","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/199","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable editingItem."},"location":{"path":"src/components/admin/TieredPermissionManager.tsx","start_line":63,"end_line":63,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/199/instances","dismissal_approved_by":null},{"number":198,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/198","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/198","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showFeatureModal."},"location":{"path":"src/components/admin/TieredPermissionManager.tsx","start_line":62,"end_line":62,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/198/instances","dismissal_approved_by":null},{"number":197,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/197","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/197","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showTierModal."},"location":{"path":"src/components/admin/TieredPermissionManager.tsx","start_line":61,"end_line":61,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/197/instances","dismissal_approved_by":null},{"number":196,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/196","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/196","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Edit, Trash2."},"location":{"path":"src/components/admin/TieredPermissionManager.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":99},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/196/instances","dismissal_approved_by":null},{"number":195,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/195","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/195","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, ChevronDown, ChevronRight, DollarSign, Edit2, Filter, Mail, MoreVertical, Settings, Trash2."},"location":{"path":"src/components/admin/OrganizationHierarchyManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":198},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/195/instances","dismissal_approved_by":null},{"number":194,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/194","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/194","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/admin/ResendVerificationEmail.tsx","start_line":42,"end_line":42,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/194/instances","dismissal_approved_by":null},{"number":193,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/193","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/193","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getPermission."},"location":{"path":"src/components/admin/PermissionManagement.tsx","start_line":199,"end_line":199,"start_column":9,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/193/instances","dismissal_approved_by":null},{"number":192,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/192","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/192","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import permissionSystem."},"location":{"path":"src/components/admin/PermissionManagement.tsx","start_line":8,"end_line":8,"start_column":1,"end_column":65},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/192/instances","dismissal_approved_by":null},{"number":191,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/191","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/191","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable limits."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":584,"end_line":584,"start_column":31,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/191/instances","dismissal_approved_by":null},{"number":190,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/190","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/190","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ModalDescription."},"location":{"path":"src/components/admin/EventSuggestionsManager.tsx","start_line":7,"end_line":13,"start_column":1,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/190/instances","dismissal_approved_by":null},{"number":189,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/189","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/189","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports CardHeader, CardTitle."},"location":{"path":"src/components/admin/EventSuggestionsManager.tsx","start_line":6,"end_line":6,"start_column":1,"end_column":71},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/189/instances","dismissal_approved_by":null},{"number":188,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/188","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/188","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, ChevronRight, Globe, Mail, Phone."},"location":{"path":"src/components/admin/EventSuggestionsManager.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":124},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/188/instances","dismissal_approved_by":null},{"number":187,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/187","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/187","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable adSize."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":250,"end_line":250,"start_column":13,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/187/instances","dismissal_approved_by":null},{"number":186,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/186","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/186","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable featuresByCategory."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":236,"end_line":236,"start_column":9,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/186/instances","dismissal_approved_by":null},{"number":185,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/185","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/185","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable toggleCategory."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":200,"end_line":200,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/185/instances","dismissal_approved_by":null},{"number":184,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/184","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/184","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setShowHelpModal."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":146,"end_line":146,"start_column":25,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/184/instances","dismissal_approved_by":null},{"number":183,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/183","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/183","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showHelpModal."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":146,"end_line":146,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/183/instances","dismissal_approved_by":null},{"number":182,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/182","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/182","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable featureFlagsEnabled."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":144,"end_line":144,"start_column":10,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/182/instances","dismissal_approved_by":null},{"number":181,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/181","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/181","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable saveStatus."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":142,"end_line":142,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/181/instances","dismissal_approved_by":null},{"number":180,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/180","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/180","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setSelectedPlan."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":140,"end_line":140,"start_column":24,"end_column":39},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/180/instances","dismissal_approved_by":null},{"number":179,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/179","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/179","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedPlan."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":140,"end_line":140,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/179/instances","dismissal_approved_by":null},{"number":178,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/178","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/178","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setActiveTab."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":139,"end_line":139,"start_column":21,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/178/instances","dismissal_approved_by":null},{"number":177,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/177","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/177","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable activeTab."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":139,"end_line":139,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/177/instances","dismissal_approved_by":null},{"number":176,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/176","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/176","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoading."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":138,"end_line":138,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/176/instances","dismissal_approved_by":null},{"number":175,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/175","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/175","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable supportLevels."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":137,"end_line":137,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/175/instances","dismissal_approved_by":null},{"number":174,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/174","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/174","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable plans."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":136,"end_line":136,"start_column":10,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/174/instances","dismissal_approved_by":null},{"number":173,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/173","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/173","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable TICKET_TYPES."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":121,"end_line":121,"start_column":7,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/173/instances","dismissal_approved_by":null},{"number":172,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/172","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/172","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable AD_SIZES."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":109,"end_line":109,"start_column":7,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/172/instances","dismissal_approved_by":null},{"number":171,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/171","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/171","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import permissionService."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":78},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/171/instances","dismissal_approved_by":null},{"number":170,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/170","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/170","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, BarChart, Book, Check, ChevronDown, ChevronRight, Clock, DollarSign, Edit, FileText, Hash, Info, Lock, Package, Settings, Shield, Tag, Trash2, Unlock, Users, Zap."},"location":{"path":"src/components/admin/EnhancedPermissionManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":234},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/170/instances","dismissal_approved_by":null},{"number":169,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/169","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/169","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable diagramRect."},"location":{"path":"src/components/VehicleAudioDiagram.tsx","start_line":190,"end_line":190,"start_column":11,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/169/instances","dismissal_approved_by":null},{"number":168,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/168","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/168","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable createConnectingLine."},"location":{"path":"src/components/VehicleAudioDiagram.tsx","start_line":187,"end_line":187,"start_column":9,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/168/instances","dismissal_approved_by":null},{"number":167,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/167","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/167","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Filter."},"location":{"path":"src/components/WebhookLogsViewer.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":169},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/167/instances","dismissal_approved_by":null},{"number":166,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/166","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/166","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Truck."},"location":{"path":"src/components/VehicleAudioDiagram.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/166/instances","dismissal_approved_by":null},{"number":165,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/165","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/165","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useEffect."},"location":{"path":"src/components/VehicleAudioDiagram.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/165/instances","dismissal_approved_by":null},{"number":164,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/164","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/164","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoading."},"location":{"path":"src/components/WebScraperModal.tsx","start_line":16,"end_line":16,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/164/instances","dismissal_approved_by":null},{"number":163,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/163","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/163","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import ScrapedEvent."},"location":{"path":"src/components/WebScraperModal.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/163/instances","dismissal_approved_by":null},{"number":162,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/162","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/162","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable user."},"location":{"path":"src/components/SubwooferDesignerAdmin.tsx","start_line":17,"end_line":17,"start_column":11,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/162/instances","dismissal_approved_by":null},{"number":161,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/161","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/161","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, CheckCircle, Filter, Save."},"location":{"path":"src/components/SubwooferDesignerAdmin.tsx","start_line":2,"end_line":5,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/161/instances","dismissal_approved_by":null},{"number":160,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/160","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/160","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isUpcoming."},"location":{"path":"src/components/SavedEvents.tsx","start_line":280,"end_line":280,"start_column":17,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/160/instances","dismissal_approved_by":null},{"number":159,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/159","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/159","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import TrendingUp."},"location":{"path":"src/components/SPLCalculatorProtected.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/159/instances","dismissal_approved_by":null},{"number":158,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/158","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/158","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Award, Calendar, Filter, Hash, MoreVertical, Search, Target, User."},"location":{"path":"src/components/ResultsDataTable.tsx","start_line":2,"end_line":6,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/158/instances","dismissal_approved_by":null},{"number":157,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/157","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/157","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useMemo."},"location":{"path":"src/components/ResultsDataTable.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":50},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/157/instances","dismissal_approved_by":null},{"number":156,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/156","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/156","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable IconComponent."},"location":{"path":"src/components/ProfessionalVehicleDiagram.tsx","start_line":810,"end_line":810,"start_column":21,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/156/instances","dismissal_approved_by":null},{"number":155,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/155","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/155","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable boxIndex."},"location":{"path":"src/components/ProfessionalVehicleDiagram.tsx","start_line":690,"end_line":690,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/155/instances","dismissal_approved_by":null},{"number":154,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/154","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/154","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable hexToRgb."},"location":{"path":"src/components/ProfessionalVehicleDiagram.tsx","start_line":619,"end_line":619,"start_column":7,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/154/instances","dismissal_approved_by":null},{"number":153,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/153","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/153","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import checkRefundEligibility."},"location":{"path":"src/components/RefundManager.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":90},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/153/instances","dismissal_approved_by":null},{"number":152,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/152","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/152","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useEffect."},"location":{"path":"src/components/ProfessionalVehicleDiagram.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/152/instances","dismissal_approved_by":null},{"number":151,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/151","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/151","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setShowTraditionalForm."},"location":{"path":"src/components/PaymentForm.tsx","start_line":57,"end_line":57,"start_column":31,"end_column":53},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/151/instances","dismissal_approved_by":null},{"number":150,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/150","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/150","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable showTraditionalForm."},"location":{"path":"src/components/PaymentForm.tsx","start_line":57,"end_line":57,"start_column":10,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/150/instances","dismissal_approved_by":null},{"number":149,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/149","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/149","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable features."},"location":{"path":"src/components/PricingPlans.tsx","start_line":21,"end_line":21,"start_column":9,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/149/instances","dismissal_approved_by":null},{"number":148,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/148","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/148","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setError."},"location":{"path":"src/components/PricingPlans.tsx","start_line":19,"end_line":19,"start_column":17,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/148/instances","dismissal_approved_by":null},{"number":147,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/147","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/147","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import CardElement."},"location":{"path":"src/components/PaymentForm.tsx","start_line":3,"end_line":10,"start_column":1,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/147/instances","dismissal_approved_by":null},{"number":146,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/146","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/146","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import StripeElements."},"location":{"path":"src/components/PaymentForm.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/146/instances","dismissal_approved_by":null},{"number":145,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/145","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/145","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable clientSecret."},"location":{"path":"src/components/PaymentMethodForm.tsx","start_line":215,"end_line":215,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/145/instances","dismissal_approved_by":null},{"number":144,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/144","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/144","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Stripe, StripeElements."},"location":{"path":"src/components/PaymentMethodForm.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":60},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/144/instances","dismissal_approved_by":null},{"number":143,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/143","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/143","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import CheckCircle."},"location":{"path":"src/components/PendingApprovalBanner.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":59},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/143/instances","dismissal_approved_by":null},{"number":142,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/142","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/142","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable performanceData."},"location":{"path":"src/components/MyResultsManager.tsx","start_line":111,"end_line":111,"start_column":10,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/142/instances","dismissal_approved_by":null},{"number":141,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/141","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/141","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import formatDateForDatabase."},"location":{"path":"src/components/MyResultsManager.tsx","start_line":16,"end_line":16,"start_column":1,"end_column":95},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/141/instances","dismissal_approved_by":null},{"number":140,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/140","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/140","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import formatDistanceToNow."},"location":{"path":"src/components/MyResultsManager.tsx","start_line":14,"end_line":14,"start_column":1,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/140/instances","dismissal_approved_by":null},{"number":139,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/139","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/139","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, Calendar, Eye, Filter, Settings, Share2, X."},"location":{"path":"src/components/MyResultsManager.tsx","start_line":2,"end_line":6,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/139/instances","dismissal_approved_by":null},{"number":138,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/138","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/138","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import getAvailableProviders."},"location":{"path":"src/components/MultiProviderPaymentForm.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":132},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/138/instances","dismissal_approved_by":null},{"number":137,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/137","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/137","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/MemberProfilePrivacySettings.tsx","start_line":150,"end_line":150,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/137/instances","dismissal_approved_by":null},{"number":136,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/136","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/136","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable profileData."},"location":{"path":"src/components/MemberProfilePrivacySettings.tsx","start_line":144,"end_line":144,"start_column":13,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/136/instances","dismissal_approved_by":null},{"number":135,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/135","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/135","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports FaEye, FaEyeSlash."},"location":{"path":"src/components/MemberProfilePrivacySettings.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":109},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/135/instances","dismissal_approved_by":null},{"number":134,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/134","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/134","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable uploadData."},"location":{"path":"src/components/LogoManager.tsx","start_line":202,"end_line":202,"start_column":21,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/134/instances","dismissal_approved_by":null},{"number":133,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/133","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/133","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable classes."},"location":{"path":"src/components/LogCAEEventModal.tsx","start_line":64,"end_line":64,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/133/instances","dismissal_approved_by":null},{"number":132,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/132","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/132","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import formatMediumDate."},"location":{"path":"src/components/LogCAEEventModal.tsx","start_line":6,"end_line":6,"start_column":1,"end_column":72},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/132/instances","dismissal_approved_by":null},{"number":131,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/131","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/131","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Download."},"location":{"path":"src/components/LogoManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":125},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/131/instances","dismissal_approved_by":null},{"number":130,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/130","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/130","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import CheckCircle."},"location":{"path":"src/components/JudgeScoring.tsx","start_line":4,"end_line":16,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/130/instances","dismissal_approved_by":null},{"number":129,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/129","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/129","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useAuth."},"location":{"path":"src/components/Layout.tsx","start_line":7,"end_line":7,"start_column":1,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/129/instances","dismissal_approved_by":null},{"number":128,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/128","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/128","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import PasswordChangeModal."},"location":{"path":"src/components/Layout.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":57},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/128/instances","dismissal_approved_by":null},{"number":127,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/127","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/127","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports MapPin, Package, Search, Shield."},"location":{"path":"src/components/Header.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":223},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/127/instances","dismissal_approved_by":null},{"number":126,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/126","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/126","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Map, MapPin."},"location":{"path":"src/components/GoogleMap.tsx","start_line":5,"end_line":5,"start_column":1,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/126/instances","dismissal_approved_by":null},{"number":125,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/125","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/125","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import GOOGLE_MAPS_API_KEY."},"location":{"path":"src/components/GoogleMap.tsx","start_line":4,"end_line":4,"start_column":1,"end_column":106},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/125/instances","dismissal_approved_by":null},{"number":124,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/124","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/124","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable obfuscatePhone."},"location":{"path":"src/components/Footer.tsx","start_line":24,"end_line":24,"start_column":7,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/124/instances","dismissal_approved_by":null},{"number":123,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/123","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/123","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable obfuscateEmail."},"location":{"path":"src/components/Footer.tsx","start_line":19,"end_line":19,"start_column":7,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/123/instances","dismissal_approved_by":null},{"number":122,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/122","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/122","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/EventForm/sections/ImageSection.tsx","start_line":314,"end_line":314,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/122/instances","dismissal_approved_by":null},{"number":121,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/121","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/121","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import EventScheduleItem."},"location":{"path":"src/components/EventForm/sections/ScheduleSection.tsx","start_line":3,"end_line":3,"start_column":1,"end_column":73},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/121/instances","dismissal_approved_by":null},{"number":120,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/120","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/120","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isValidImageUrl."},"location":{"path":"src/components/EventForm/sections/ImageSection.tsx","start_line":204,"end_line":204,"start_column":9,"end_column":24},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/120/instances","dismissal_approved_by":null},{"number":119,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/119","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/119","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/EventForm/sections/ImageSection.tsx","start_line":149,"end_line":149,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/119/instances","dismissal_approved_by":null},{"number":118,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/118","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/118","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoadingTemplates."},"location":{"path":"src/components/EventForm/sections/ImageSection.tsx","start_line":56,"end_line":56,"start_column":10,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/118/instances","dismissal_approved_by":null},{"number":116,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/116","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/116","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable EmailTemplateModal."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":1247,"end_line":1247,"start_column":7,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/116/instances","dismissal_approved_by":null},{"number":115,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/115","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/115","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import useEffect."},"location":{"path":"src/components/EventForm/sections/ContactSection.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":42},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/115/instances","dismissal_approved_by":null},{"number":114,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/114","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/114","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable startDate."},"location":{"path":"src/components/EventForm/EventForm.tsx","start_line":200,"end_line":200,"start_column":13,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/114/instances","dismissal_approved_by":null},{"number":113,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/113","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/113","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import EventScheduleItem."},"location":{"path":"src/components/EventForm/EventForm.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":124},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/113/instances","dismissal_approved_by":null},{"number":112,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/112","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/112","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Building2, User."},"location":{"path":"src/components/EventForm/sections/BasicInfoSection.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":58},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/112/instances","dismissal_approved_by":null},{"number":111,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/111","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/111","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleModalClose."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":408,"end_line":408,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/111/instances","dismissal_approved_by":null},{"number":110,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/110","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/110","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable handleAddNew."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":382,"end_line":382,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/110/instances","dismissal_approved_by":null},{"number":109,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/109","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/109","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable getCategoryColor."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":371,"end_line":371,"start_column":9,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/109/instances","dismissal_approved_by":null},{"number":108,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/108","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/108","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable insertVariable."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":354,"end_line":354,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/108/instances","dismissal_approved_by":null},{"number":107,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/107","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/107","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable deleteTemplate."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":308,"end_line":308,"start_column":9,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/107/instances","dismissal_approved_by":null},{"number":106,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/106","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/106","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable selectedTemplate."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":91,"end_line":91,"start_column":10,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/106/instances","dismissal_approved_by":null},{"number":105,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/105","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/105","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isModalOpen."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":90,"end_line":90,"start_column":10,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/105/instances","dismissal_approved_by":null},{"number":104,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/104","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/104","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import EMAIL_VARIABLES."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":26,"end_line":26,"start_column":1,"end_column":119},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/104/instances","dismissal_approved_by":null},{"number":103,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/103","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/103","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BookOpen, CheckCircle, EyeOff."},"location":{"path":"src/components/EmailTemplateManager.tsx","start_line":2,"end_line":23,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/103/instances","dismissal_approved_by":null},{"number":102,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/102","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/102","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable purgeConfirm."},"location":{"path":"src/components/EnhancedRecentActivity.tsx","start_line":34,"end_line":34,"start_column":10,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/102/instances","dismissal_approved_by":null},{"number":101,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/101","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/101","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Clock, Eye, Filter."},"location":{"path":"src/components/EnhancedRecentActivity.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":188},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/101/instances","dismissal_approved_by":null},{"number":100,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/100","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/100","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertCircle, Filter, Pause, Play, User."},"location":{"path":"src/components/EmailQueueManager.tsx","start_line":2,"end_line":21,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/100/instances","dismissal_approved_by":null},{"number":99,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/99","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/99","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable classes."},"location":{"path":"src/components/EditCompetitionResultModal.tsx","start_line":113,"end_line":113,"start_column":10,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/99/instances","dismissal_approved_by":null},{"number":98,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/98","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/98","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports CheckCircle, Clock, FileText, Hash, MapPin, Target, User."},"location":{"path":"src/components/EditCompetitionResultModal.tsx","start_line":2,"end_line":5,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/98/instances","dismissal_approved_by":null},{"number":97,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/97","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/97","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Award, Clock, PieChart, Star, Target, TrendingUp."},"location":{"path":"src/components/DashboardWidgets.tsx","start_line":2,"end_line":22,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/97/instances","dismissal_approved_by":null},{"number":96,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/96","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/96","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import DollarSign."},"location":{"path":"src/components/DirectoryListView.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/96/instances","dismissal_approved_by":null},{"number":92,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/92","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/92","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import getConsentPreferences."},"location":{"path":"src/components/CookieConsent.tsx","start_line":3,"end_line":10,"start_column":1,"end_column":33},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/92/instances","dismissal_approved_by":null},{"number":91,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/91","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/91","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports AlertTriangle, MoreVertical."},"location":{"path":"src/components/CompetitionResultCard.tsx","start_line":2,"end_line":6,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/91/instances","dismissal_approved_by":null},{"number":90,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/90","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/90","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Globe."},"location":{"path":"src/components/CMSPageHelp.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":98},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/90/instances","dismissal_approved_by":null},{"number":89,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/89","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/89","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"src/components/BannerAICreator.tsx","start_line":243,"end_line":243,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/89/instances","dismissal_approved_by":null},{"number":88,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/88","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/88","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable resetCreator."},"location":{"path":"src/components/BannerAICreator.tsx","start_line":203,"end_line":203,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/88/instances","dismissal_approved_by":null},{"number":87,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/87","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/87","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable initialValues."},"location":{"path":"src/components/BannerAICreator.tsx","start_line":62,"end_line":62,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/87/instances","dismissal_approved_by":null},{"number":86,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/86","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/86","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Copy, Palette, RefreshCw, Settings."},"location":{"path":"src/components/BannerAICreator.tsx","start_line":2,"end_line":19,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/86/instances","dismissal_approved_by":null},{"number":85,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/85","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/85","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable formatDateWithTimezone."},"location":{"path":"src/components/BackupManager.tsx","start_line":213,"end_line":213,"start_column":9,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/85/instances","dismissal_approved_by":null},{"number":84,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/84","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/84","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable formatDate."},"location":{"path":"src/components/BackupManager.tsx","start_line":203,"end_line":203,"start_column":9,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/84/instances","dismissal_approved_by":null},{"number":83,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/83","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/83","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable setAbTestData."},"location":{"path":"src/components/AdvertisementImageManager.tsx","start_line":68,"end_line":68,"start_column":22,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/83/instances","dismissal_approved_by":null},{"number":82,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/82","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/82","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable abTestData."},"location":{"path":"src/components/AdvertisementImageManager.tsx","start_line":68,"end_line":68,"start_column":10,"end_column":20},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/82/instances","dismissal_approved_by":null},{"number":81,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/81","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/81","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Copy, Download, Pause, Settings."},"location":{"path":"src/components/AdvertisementImageManager.tsx","start_line":3,"end_line":20,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/81/instances","dismissal_approved_by":null},{"number":80,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/80","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/80","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports memo, startTransition, useMemo."},"location":{"path":"src/components/AdvertisementImageManager.tsx","start_line":1,"end_line":1,"start_column":1,"end_column":97},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/80/instances","dismissal_approved_by":null},{"number":79,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/79","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/79","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable organizations."},"location":{"path":"src/components/AdminLeaderboardManager.tsx","start_line":114,"end_line":114,"start_column":10,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/79/instances","dismissal_approved_by":null},{"number":77,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/77","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/77","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Link."},"location":{"path":"src/components/AdminLeaderboardManager.tsx","start_line":8,"end_line":8,"start_column":1,"end_column":41},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/77/instances","dismissal_approved_by":null},{"number":76,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/76","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/76","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports Award, Calendar, Edit3, Eye, FileText, Filter, MoreVertical, Plus, Settings, Users."},"location":{"path":"src/components/AdminLeaderboardManager.tsx","start_line":2,"end_line":7,"start_column":1,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/76/instances","dismissal_approved_by":null},{"number":75,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/75","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/75","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable isLoading."},"location":{"path":"src/components/AdminCouponManager.tsx","start_line":52,"end_line":52,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/75/instances","dismissal_approved_by":null},{"number":74,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/74","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/74","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused imports BarChart3, Eye, Users."},"location":{"path":"src/components/AdminCouponManager.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":145},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/74/instances","dismissal_approved_by":null},{"number":73,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/73","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/73","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import Info."},"location":{"path":"src/components/AdminContactSettings.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":118},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/73/instances","dismissal_approved_by":null},{"number":72,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/72","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/72","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import X."},"location":{"path":"src/components/AdDisplay.tsx","start_line":2,"end_line":2,"start_column":1,"end_column":48},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/72/instances","dismissal_approved_by":null},{"number":67,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/67","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/67","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"scripts/rotate-keys.ts","start_line":362,"end_line":362,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/67/instances","dismissal_approved_by":null},{"number":66,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/66","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/66","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"scripts/rotate-keys.ts","start_line":356,"end_line":356,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/66/instances","dismissal_approved_by":null},{"number":65,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/65","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/65","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"scripts/rotate-keys.ts","start_line":310,"end_line":310,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/65/instances","dismissal_approved_by":null},{"number":64,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/64","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/64","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"scripts/rotate-keys.ts","start_line":141,"end_line":141,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/64/instances","dismissal_approved_by":null},{"number":63,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/63","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/63","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import readFileSync."},"location":{"path":"scripts/deploy-stripe-integration.js","start_line":15,"end_line":15,"start_column":1,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/63/instances","dismissal_approved_by":null},{"number":62,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/62","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/62","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"import_emma_events.mjs","start_line":211,"end_line":211,"start_column":17,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/62/instances","dismissal_approved_by":null},{"number":61,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/61","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/61","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testData."},"location":{"path":"fix-rls-issues.ts","start_line":29,"end_line":29,"start_column":19,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/61/instances","dismissal_approved_by":null},{"number":60,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/60","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/60","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"deploy-security-fixes.ts","start_line":140,"end_line":140,"start_column":15,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/60/instances","dismissal_approved_by":null},{"number":59,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/59","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/59","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable finalTest."},"location":{"path":"fix-admin-settings.cjs","start_line":168,"end_line":168,"start_column":19,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/59/instances","dismissal_approved_by":null},{"number":58,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/58","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/58","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"deploy-security-fixes.ts","start_line":115,"end_line":115,"start_column":13,"end_column":17},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/58/instances","dismissal_approved_by":null},{"number":57,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/57","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/57","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable newTestData."},"location":{"path":"fix-admin-settings.cjs","start_line":120,"end_line":120,"start_column":21,"end_column":32},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/57/instances","dismissal_approved_by":null},{"number":56,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/56","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/56","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable error."},"location":{"path":"deploy-security-fixes.ts","start_line":63,"end_line":63,"start_column":23,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/56/instances","dismissal_approved_by":null},{"number":55,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/55","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/55","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable data."},"location":{"path":"deploy-security-fixes.ts","start_line":63,"end_line":63,"start_column":17,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/55/instances","dismissal_approved_by":null},{"number":54,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/54","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/54","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable directError."},"location":{"path":"fix-admin-settings.cjs","start_line":43,"end_line":43,"start_column":24,"end_column":35},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/54/instances","dismissal_approved_by":null},{"number":53,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/53","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/53","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable successCount."},"location":{"path":"deploy-security-fixes.ts","start_line":49,"end_line":49,"start_column":9,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/53/instances","dismissal_approved_by":null},{"number":52,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/52","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/52","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable configs."},"location":{"path":"fix-rls-issues-secure.ts","start_line":127,"end_line":127,"start_column":21,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/52/instances","dismissal_approved_by":null},{"number":51,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/51","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/51","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable testData."},"location":{"path":"fix-admin-settings.cjs","start_line":24,"end_line":24,"start_column":19,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/51/instances","dismissal_approved_by":null},{"number":50,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/50","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/50","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable columnsError."},"location":{"path":"fix-admin-settings.cjs","start_line":19,"end_line":19,"start_column":35,"end_column":47},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/50/instances","dismissal_approved_by":null},{"number":49,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/49","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/49","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable columns."},"location":{"path":"fix-admin-settings.cjs","start_line":19,"end_line":19,"start_column":19,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/49/instances","dismissal_approved_by":null},{"number":48,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/48","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/48","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused variable refunds."},"location":{"path":"fix-rls-issues-secure.ts","start_line":122,"end_line":122,"start_column":21,"end_column":28},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/48/instances","dismissal_approved_by":null},{"number":47,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/47","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/47","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unused-local-variable","severity":"note","description":"Unused variable, import, function or class","name":"js/unused-local-variable","tags":["maintainability","quality","useless-code"],"full_description":"Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.","help":"# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Unused import js."},"location":{"path":"eslint.config.js","start_line":1,"end_line":1,"start_column":1,"end_column":29},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/47/instances","dismissal_approved_by":null},{"number":46,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/46","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/46","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'error' always evaluates to false."},"location":{"path":"src/pages/UserDetails.tsx","start_line":921,"end_line":921,"start_column":8,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/46/instances","dismissal_approved_by":null},{"number":45,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/45","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/45","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'editingOrg' always evaluates to true."},"location":{"path":"src/pages/OrganizationManager.tsx","start_line":233,"end_line":233,"start_column":27,"end_column":37},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/45/instances","dismissal_approved_by":null},{"number":44,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/44","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/44","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'eventData' always evaluates to true."},"location":{"path":"src/pages/EditEvent.tsx","start_line":535,"end_line":535,"start_column":10,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/44/instances","dismissal_approved_by":null},{"number":43,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/43","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/43","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'error' always evaluates to false."},"location":{"path":"src/pages/EditUser.tsx","start_line":284,"end_line":284,"start_column":16,"end_column":21},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/43/instances","dismissal_approved_by":null},{"number":42,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/42","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/42","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'audioSystem' always evaluates to true."},"location":{"path":"src/pages/AudioDiagramEditorPage.tsx","start_line":110,"end_line":110,"start_column":8,"end_column":19},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/42/instances","dismissal_approved_by":null},{"number":41,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/41","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/41","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'data' always evaluates to true."},"location":{"path":"src/pages/AdminNewsletterManager.tsx","start_line":605,"end_line":605,"start_column":22,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/41/instances","dismissal_approved_by":null},{"number":40,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/40","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/40","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/trivial-conditional","severity":"warning","description":"Useless conditional","name":"js/trivial-conditional","tags":["correctness","external/cwe/cwe-570","external/cwe/cwe-571","quality","reliability"],"full_description":"If a conditional expression always evaluates to true or always evaluates to false, this suggests incomplete code or a logic error.","help":"# Useless conditional\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is useless. If it is no longer needed, remove it.\n\n\n## Example\nThe following example constructs an array `lines`, and then attempts to check whether it has any elements by means of an if conditional `if (!lines)`.\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\nNote that in JavaScript (unlike some other languages) arrays and objects are always considered to be true when evaluated in a Boolean context. The code should instead check `lines.length`:\n\n\n```javascript\nfunction getLastLine(input) {\n  var lines = [], nextLine;\n  while ((nextLine = readNextLine(input)))\n    lines.push(nextLine);\n  if (!lines.length)\n    throw new Error(\"No lines!\");\n  return lines[lines.length-1];\n}\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n* Common Weakness Enumeration: [CWE-570](https://cwe.mitre.org/data/definitions/570.html).\n* Common Weakness Enumeration: [CWE-571](https://cwe.mitre.org/data/definitions/571.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This use of variable 'isMounted' always evaluates to true."},"location":{"path":"src/App.tsx","start_line":140,"end_line":140,"start_column":13,"end_column":22},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/40/instances","dismissal_approved_by":null},{"number":39,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/39","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/39","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unreachable-statement","severity":"warning","description":"Unreachable statement","name":"js/unreachable-statement","tags":["correctness","external/cwe/cwe-561","quality","reliability"],"full_description":"Unreachable statements are often indicative of missing code or latent bugs and should be avoided.","help":"# Unreachable statement\nAn unreachable statement almost always indicates missing code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the statement has become unreachable. If it is no longer needed, remove the statement.\n\n\n## Example\nIn the following example, a spurious semicolon after the `if` condition at line 2 makes the `return` statement on line 4 unreachable: the function will always execute the `return` statement on line 3 first, so it will never reach line 4.\n\n\n```javascript\nfunction f() {\n\tif (someCond());\n\t\treturn 23;\n\treturn 42;\n}\n```\nTo correct this issue, remove the spurious semicolon:\n\n\n```javascript\nfunction f() {\n\tif (someCond())\n\t\treturn 23;\n\treturn 42;\n}\n```\n\n## References\n* Wikipedia: [Unreachable code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This statement is unreachable."},"location":{"path":"supabase/functions/admin-create-settings-table/index.ts","start_line":55,"end_line":55,"start_column":5,"end_column":23},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/39/instances","dismissal_approved_by":null},{"number":38,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/38","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/38","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unreachable-statement","severity":"warning","description":"Unreachable statement","name":"js/unreachable-statement","tags":["correctness","external/cwe/cwe-561","quality","reliability"],"full_description":"Unreachable statements are often indicative of missing code or latent bugs and should be avoided.","help":"# Unreachable statement\nAn unreachable statement almost always indicates missing code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the statement has become unreachable. If it is no longer needed, remove the statement.\n\n\n## Example\nIn the following example, a spurious semicolon after the `if` condition at line 2 makes the `return` statement on line 4 unreachable: the function will always execute the `return` statement on line 3 first, so it will never reach line 4.\n\n\n```javascript\nfunction f() {\n\tif (someCond());\n\t\treturn 23;\n\treturn 42;\n}\n```\nTo correct this issue, remove the spurious semicolon:\n\n\n```javascript\nfunction f() {\n\tif (someCond())\n\t\treturn 23;\n\treturn 42;\n}\n```\n\n## References\n* Wikipedia: [Unreachable code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This statement is unreachable."},"location":{"path":"src/mcp/server.ts","start_line":527,"end_line":527,"start_column":5,"end_column":13},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/38/instances","dismissal_approved_by":null},{"number":37,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/37","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/37","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unreachable-statement","severity":"warning","description":"Unreachable statement","name":"js/unreachable-statement","tags":["correctness","external/cwe/cwe-561","quality","reliability"],"full_description":"Unreachable statements are often indicative of missing code or latent bugs and should be avoided.","help":"# Unreachable statement\nAn unreachable statement almost always indicates missing code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the statement has become unreachable. If it is no longer needed, remove the statement.\n\n\n## Example\nIn the following example, a spurious semicolon after the `if` condition at line 2 makes the `return` statement on line 4 unreachable: the function will always execute the `return` statement on line 3 first, so it will never reach line 4.\n\n\n```javascript\nfunction f() {\n\tif (someCond());\n\t\treturn 23;\n\treturn 42;\n}\n```\nTo correct this issue, remove the spurious semicolon:\n\n\n```javascript\nfunction f() {\n\tif (someCond())\n\t\treturn 23;\n\treturn 42;\n}\n```\n\n## References\n* Wikipedia: [Unreachable code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This statement is unreachable."},"location":{"path":"src/mcp/server.ts","start_line":490,"end_line":490,"start_column":7,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/37/instances","dismissal_approved_by":null},{"number":36,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/36","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/36","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/unreachable-statement","severity":"warning","description":"Unreachable statement","name":"js/unreachable-statement","tags":["correctness","external/cwe/cwe-561","quality","reliability"],"full_description":"Unreachable statements are often indicative of missing code or latent bugs and should be avoided.","help":"# Unreachable statement\nAn unreachable statement almost always indicates missing code or a latent bug and should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the statement has become unreachable. If it is no longer needed, remove the statement.\n\n\n## Example\nIn the following example, a spurious semicolon after the `if` condition at line 2 makes the `return` statement on line 4 unreachable: the function will always execute the `return` statement on line 3 first, so it will never reach line 4.\n\n\n```javascript\nfunction f() {\n\tif (someCond());\n\t\treturn 23;\n\treturn 42;\n}\n```\nTo correct this issue, remove the spurious semicolon:\n\n\n```javascript\nfunction f() {\n\tif (someCond())\n\t\treturn 23;\n\treturn 42;\n}\n```\n\n## References\n* Wikipedia: [Unreachable code](http://en.wikipedia.org/wiki/Unreachable_code).\n* Common Weakness Enumeration: [CWE-561](https://cwe.mitre.org/data/definitions/561.html).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This statement is unreachable."},"location":{"path":"src/mcp/server.ts","start_line":452,"end_line":452,"start_column":7,"end_column":15},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/36/instances","dismissal_approved_by":null},{"number":35,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/35","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/35","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/useless-comparison-test","severity":"warning","description":"Useless comparison test","name":"js/useless-comparison-test","tags":["correctness","quality","reliability"],"full_description":"A comparison that always evaluates to true or always evaluates to false may indicate faulty logic and dead code.","help":"# Useless comparison test\nIf a condition always evaluates to true or always evaluates to false, this often indicates incomplete code or a latent bug, and it should be examined carefully.\n\n\n## Recommendation\nExamine the surrounding code to determine why the condition is redundant. If it is no longer needed, remove it.\n\nIf the check is needed to guard against `NaN` values, insert a comment explaining the possibility of `NaN`.\n\n\n## Example\nThe following example finds the index of an element in a given slice of the array:\n\n\n```javascript\nfunction findValue(values, x, start, end) {\n  let i;\n  for (i = start; i < end; ++i) {\n    if (values[i] === x) {\n        return i;\n    }\n  }\n  if (i < end) {\n    return i;\n  }\n  return -1;\n}\n\n```\nThe condition `i < end` at the end is always false, however. The code can be clarified if the redundant condition is removed:\n\n\n```javascript\nfunction findValue(values, x, start, end) {\n  for (let i = start; i < end; ++i) {\n    if (values[i] === x) {\n        return i;\n    }\n  }\n  return -1;\n}\n\n```\n\n## References\n* Mozilla Developer Network: [Truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), [Falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The condition 'dailyLimit === -1' is always false."},"location":{"path":"src/components/SPLCalculatorProtected.tsx","start_line":203,"end_line":203,"start_column":35,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/35/instances","dismissal_approved_by":null},{"number":34,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/34","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/34","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/indirect-command-line-injection","severity":"warning","description":"Indirect uncontrolled command line","name":"js/indirect-command-line-injection","tags":["correctness","external/cwe/cwe-078","external/cwe/cwe-088","security"],"full_description":"Forwarding command-line arguments to a child process executed within a shell may indirectly introduce command-line injection vulnerabilities.","help":"# Indirect uncontrolled command line\nForwarding command-line arguments to `child_process.exec` or some other library routine that executes a system command within a shell can change the meaning of the command unexpectedly due to unescaped special characters.\n\nWhen the forwarded command-line arguments come from a parent process that has not escaped the special characters in the arguments, then the parent process may indirectly be vulnerable to command-line injection since the special characters are evaluated unexpectedly.\n\n\n## Recommendation\nIf possible, use APIs that don't run shell commands and accept command arguments as an array of strings rather than a single concatenated string. This is both safer and more portable.\n\nIf given arguments as a single string, avoid simply splitting the string on whitespace. Arguments may contain quoted whitespace, causing them to split into multiple arguments. Use a library like `shell-quote` to parse the string into an array of arguments instead.\n\nIf this approach is not viable, then add code to verify that each forwarded command-line argument is properly escaped before using it.\n\n\n## Example\nThe following wrapper script example executes another JavaScript file in a child process and forwards some command-line arguments. This is problematic because the special characters in the command-line arguments may change the meaning of the child process invocation unexpectedly. For instance, if one of the command-line arguments is `\"dollar$separated$name\"`, then the child process will substitute the two environment variables `$separated` and `$name` before invoking `node`.\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execSync(`node ${script} ${args.join(' ')}`); // BAD\n\n```\nIf another program uses `child_process.execFile` to invoke the above wrapper script with input from a remote user, then there may be a command-line injection vulnerability. This may be surprising, since a command-line invocation with `child_process.execFile` is generally considered safe. But in this case, the remote user input is simply forwarded to the problematic `process.exec` call in the wrapper script.\n\nTo guard against this, use an API that does not perform environment variable substitution, such as `child_process.execFile`:\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', [script].concat(args)); // GOOD\n\n```\nIf you want to allow the user to specify other options to `node`, you can use a library like `shell-quote` to parse the user input into an array of arguments without risking command injection:\n\n\n```javascript\nvar cp = require(\"child_process\"),\n    shellQuote = require(\"shell-quote\");\n\nconst args = process.argv.slice(2);\nlet nodeOpts = '';\nif (args[0] === '--node-opts') {\n    nodeOpts = args[1];\n    args.splice(0, 2);\n}\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', shellQuote.parse(nodeOpts).concat(script).concat(args)); // GOOD\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* npm: [shell-quote](https://www.npmjs.com/package/shell-quote).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This command depends on an unsanitized command-line argument."},"location":{"path":"scripts/bump-version.js","start_line":39,"end_line":39,"start_column":31,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/34/instances","dismissal_approved_by":null},{"number":33,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/33","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/33","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/file-system-race","severity":"warning","description":"Potential file system race condition","name":"js/file-system-race","tags":["external/cwe/cwe-367","security"],"full_description":"Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.","help":"# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"The file may have changed since it was checked."},"location":{"path":"scripts/scan-for-secrets.ts","start_line":169,"end_line":169,"start_column":21,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/33/instances","dismissal_approved_by":null},{"number":32,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/32","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/32","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-origin-check","severity":"warning","description":"Missing origin verification in `postMessage` handler","name":"js/missing-origin-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-940","security"],"full_description":"Missing origin verification in a `postMessage` handler allows any windows to send arbitrary data to the handler.","help":"# Missing origin verification in `postMessage` handler\nThe `\"message\"` event is used to send messages between windows. An untrusted window can send a message to a trusted window, and it is up to the receiver to verify the legitimacy of the message. One way of performing that verification is to check the `origin` of the message ensure that it originates from a trusted window.\n\n\n## Recommendation\nAlways verify the origin of incoming messages.\n\n\n## Example\nThe example below uses a received message to execute some code. However, the origin of the message is not checked, so it might be possible for an attacker to execute arbitrary code.\n\n\n```javascript\nfunction postMessageHandler(event) {\n    let origin = event.origin.toLowerCase();\n\n    console.log(origin)\n    // BAD: the origin property is not checked\n    eval(event.data);\n}\n\nwindow.addEventListener('message', postMessageHandler, false);\n\n```\nThe example is fixed below, where the origin is checked to be trusted. It is therefore not possible for a malicious user to perform an attack using an untrusted origin.\n\n\n```javascript\nfunction postMessageHandler(event) {\n    console.log(event.origin)\n    // GOOD: the origin property is checked\n    if (event.origin === 'https://www.example.com') {\n        // do something\n    }\n}\n\nwindow.addEventListener('message', postMessageHandler, false);\n```\n\n## References\n* [Window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage).\n* [Web message manipulation](https://portswigger.net/web-security/dom-based/web-message-manipulation).\n* [The pitfalls of postMessage](https://labs.detectify.com/2016/12/08/the-pitfalls-of-postmessage/).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-940](https://cwe.mitre.org/data/definitions/940.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Postmessage handler has no origin check."},"location":{"path":"test-rotation.html","start_line":165,"end_line":165,"start_column":49,"end_column":54},"classifications":["test"]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/32/instances","dismissal_approved_by":null},{"number":31,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/31","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/31","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/insecure-randomness","severity":"warning","description":"Insecure randomness","name":"js/insecure-randomness","tags":["external/cwe/cwe-338","security"],"full_description":"Using a cryptographically weak pseudo-random number generator to generate a security-sensitive value may allow an attacker to predict what value will be generated.","help":"# Insecure randomness\nUsing a cryptographically weak pseudo-random number generator to generate a security-sensitive value, such as a password, makes it easier for an attacker to predict the value.\n\nPseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values, the seed. If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.\n\n\n## Recommendation\nUse a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a rule of thumb, a value should be considered \"security-sensitive\" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.\n\nFor JavaScript on the NodeJS platform, `crypto.getRandomBytes` provides a cryptographically secure pseudo-random byte generator. Note that the conversion from bytes to numbers can introduce bias that breaks the security.\n\nFor JavaScript in the browser, `crypto.getRandomValues` provides a cryptographically secure pseudo-random number generator.\n\n\n## Example\nThe following examples show different ways of generating a password.\n\nIn the first case, we generate a fresh password by appending a random integer to the end of a static string. The random number generator used (`Math.random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated password.\n\n\n```javascript\nfunction insecurePassword() {\n    // BAD: the random suffix is not cryptographically secure\n    var suffix = Math.random();\n    var password = \"myPassword\" + suffix;\n    return password;\n}\n\n```\nIn the second example, a cryptographically secure random number generator is used for the same purpose. In this case, it is much harder to predict the generated integers.\n\n\n```javascript\nfunction securePassword() {\n    // GOOD: the random suffix is cryptographically secure\n    var suffix = window.crypto.getRandomValues(new Uint32Array(1))[0];\n    var password = \"myPassword\" + suffix;\n    \n    // GOOD: if a random value between 0 and 1 is desired\n    var secret = window.crypto.getRandomValues(new Uint32Array(1))[0] * Math.pow(2,-32);\n}\n\n```\n\n## References\n* Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).\n* Mozilla Developer Network: [Crypto: getRandomValues()](https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues).\n* NodeJS: [crypto.randomBytes](https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback)\n* Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This uses a cryptographically insecure random number generated at Math.random() in a security context."},"location":{"path":"src/pages/EventDetails.tsx","start_line":40,"end_line":40,"start_column":19,"end_column":85},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/31/instances","dismissal_approved_by":null},{"number":30,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/30","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/30","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"supabase/functions/send-mailgun-email/index.ts","start_line":154,"end_line":154,"start_column":7,"end_column":80},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/30/instances","dismissal_approved_by":null},{"number":29,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/29","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/29","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"supabase/functions/send-welcome-email/index.ts","start_line":62,"end_line":62,"start_column":25,"end_column":52},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/29/instances","dismissal_approved_by":null},{"number":28,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/28","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/28","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/stack-trace-exposure","severity":"warning","description":"Information exposure through a stack trace","name":"js/stack-trace-exposure","tags":["external/cwe/cwe-209","external/cwe/cwe-497","security"],"full_description":"Propagating stack trace information to an external user can unintentionally reveal implementation details that are useful to an attacker for developing a subsequent exploit.","help":"# Information exposure through a stack trace\nSoftware developers often add stack traces to error messages, as a debugging aid. Whenever that error message occurs for an end user, the developer can use the stack trace to help identify how to fix the problem. In particular, stack traces can tell the developer more about the sequence of events that led to a failure, as opposed to merely the final state of the software when the error occurred.\n\nUnfortunately, the same information can be useful to an attacker. The sequence of function names in a stack trace can reveal the structure of the application as well as any internal components it relies on. Furthermore, the error message at the top of a stack trace can include information such as server-side file names and SQL code that the application relies on, allowing an attacker to fine-tune a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more generic error message that reveals less information. Either suppress the stack trace entirely, or log it only on the server.\n\n\n## Example\nIn the following example, an exception is caught and its stack trace is sent back to the remote user as part of the HTTP response. As such, the user is able to see a detailed stack trace, which may contain sensitive information.\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    res.end(err.stack); // NOT OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\nInstead, the stack trace should be logged only on the server. That way, the developers can still access and use the error log, but remote users will not see the information:\n\n\n```javascript\nvar http = require('http');\n\nhttp.createServer(function onRequest(req, res) {\n  var body;\n  try {\n    body = handleRequest(req);\n  }\n  catch (err) {\n    res.statusCode = 500;\n    res.setHeader(\"Content-Type\", \"text/plain\");\n    log(\"Exception occurred\", err.stack);\n    res.end(\"An exception occurred\"); // OK\n    return;\n  }\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.setHeader(\"Content-Length\", body.length);\n  res.end(body);\n}).listen(3000);\n\n```\n\n## References\n* OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n* Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n* Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This information exposed to the user depends on stack trace information."},"location":{"path":"supabase/functions/register-user/index.ts","start_line":182,"end_line":188,"start_column":7,"end_column":9},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/28/instances","dismissal_approved_by":null},{"number":27,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/27","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/27","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-dom","severity":"warning","description":"DOM text reinterpreted as HTML","name":"js/xss-through-dom","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from the DOM as HTML can lead to a cross-site scripting vulnerability.","help":"# DOM text reinterpreted as HTML\nExtracting text from a DOM node and interpreting it as HTML can lead to a cross-site scripting vulnerability.\n\nA webpage with this vulnerability reads text from the DOM, and afterwards adds the text as HTML to the DOM. Using text from the DOM as HTML effectively unescapes the text, and thereby invalidates any escaping done on the text. If an attacker is able to control the safe sanitized text, then this vulnerability can be exploited to perform a cross-site scripting attack.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing text to the page, or one of the other solutions that are mentioned in the References section below.\n\n\n## Example\nThe following example shows a webpage using a `data-target` attribute to select and manipulate a DOM element using the JQuery library. In the example, the `data-target` attribute is read into the `target` variable, and the `$` function is then supposed to use the `target` variable as a CSS selector to determine which element should be manipulated.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n    $(target).hide();\n});\n\n```\nHowever, if an attacker can control the `data-target` attribute, then the value of `target` can be used to cause the `$` function to execute arbitrary JavaScript.\n\nThe above vulnerability can be fixed by using `$.find` instead of `$`. The `$.find` function will only interpret `target` as a CSS selector and never as HTML, thereby preventing an XSS attack.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n\t$.find(target).hide();\n});\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://owasp.org/www-community/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"DOM text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"src/components/EventForm/sections/ImageSection.tsx","start_line":631,"end_line":631,"start_column":26,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/27/instances","dismissal_approved_by":null},{"number":26,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/26","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/26","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-dom","severity":"warning","description":"DOM text reinterpreted as HTML","name":"js/xss-through-dom","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from the DOM as HTML can lead to a cross-site scripting vulnerability.","help":"# DOM text reinterpreted as HTML\nExtracting text from a DOM node and interpreting it as HTML can lead to a cross-site scripting vulnerability.\n\nA webpage with this vulnerability reads text from the DOM, and afterwards adds the text as HTML to the DOM. Using text from the DOM as HTML effectively unescapes the text, and thereby invalidates any escaping done on the text. If an attacker is able to control the safe sanitized text, then this vulnerability can be exploited to perform a cross-site scripting attack.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing text to the page, or one of the other solutions that are mentioned in the References section below.\n\n\n## Example\nThe following example shows a webpage using a `data-target` attribute to select and manipulate a DOM element using the JQuery library. In the example, the `data-target` attribute is read into the `target` variable, and the `$` function is then supposed to use the `target` variable as a CSS selector to determine which element should be manipulated.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n    $(target).hide();\n});\n\n```\nHowever, if an attacker can control the `data-target` attribute, then the value of `target` can be used to cause the `$` function to execute arbitrary JavaScript.\n\nThe above vulnerability can be fixed by using `$.find` instead of `$`. The `$.find` function will only interpret `target` as a CSS selector and never as HTML, thereby preventing an XSS attack.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n\t$.find(target).hide();\n});\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://owasp.org/www-community/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"DOM text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"src/components/EventForm/sections/ImageSection.tsx","start_line":613,"end_line":613,"start_column":26,"end_column":36},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/26/instances","dismissal_approved_by":null},{"number":25,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/25","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/25","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/xss-through-dom","severity":"warning","description":"DOM text reinterpreted as HTML","name":"js/xss-through-dom","tags":["external/cwe/cwe-079","external/cwe/cwe-116","security"],"full_description":"Reinterpreting text from the DOM as HTML can lead to a cross-site scripting vulnerability.","help":"# DOM text reinterpreted as HTML\nExtracting text from a DOM node and interpreting it as HTML can lead to a cross-site scripting vulnerability.\n\nA webpage with this vulnerability reads text from the DOM, and afterwards adds the text as HTML to the DOM. Using text from the DOM as HTML effectively unescapes the text, and thereby invalidates any escaping done on the text. If an attacker is able to control the safe sanitized text, then this vulnerability can be exploited to perform a cross-site scripting attack.\n\n\n## Recommendation\nTo guard against cross-site scripting, consider using contextual output encoding/escaping before writing text to the page, or one of the other solutions that are mentioned in the References section below.\n\n\n## Example\nThe following example shows a webpage using a `data-target` attribute to select and manipulate a DOM element using the JQuery library. In the example, the `data-target` attribute is read into the `target` variable, and the `$` function is then supposed to use the `target` variable as a CSS selector to determine which element should be manipulated.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n    $(target).hide();\n});\n\n```\nHowever, if an attacker can control the `data-target` attribute, then the value of `target` can be used to cause the `$` function to execute arbitrary JavaScript.\n\nThe above vulnerability can be fixed by using `$.find` instead of `$`. The `$.find` function will only interpret `target` as a CSS selector and never as HTML, thereby preventing an XSS attack.\n\n\n```javascript\n$(\"button\").click(function () {\n    var target = $(this).attr(\"data-target\");\n\t$.find(target).hide();\n});\n\n```\n\n## References\n* OWASP: [DOM based XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html).\n* OWASP: [XSS (Cross Site Scripting) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n* OWASP [DOM Based XSS](https://owasp.org/www-community/attacks/DOM_Based_XSS).\n* OWASP [Types of Cross-Site Scripting](https://owasp.org/www-community/Types_of_Cross-Site_Scripting).\n* Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n* Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"DOM text is reinterpreted as HTML without escaping meta-characters."},"location":{"path":"src/components/AdImageUpload.tsx","start_line":122,"end_line":122,"start_column":18,"end_column":25},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/25/instances","dismissal_approved_by":null},{"number":24,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/24","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/24","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"src/utils/input-validation.ts","start_line":370,"end_line":371,"start_column":17,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/24/instances","dismissal_approved_by":null},{"number":23,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/23","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/23","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"src/utils/input-validation.ts","start_line":370,"end_line":372,"start_column":17,"end_column":31},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/23/instances","dismissal_approved_by":null},{"number":22,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/22","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/22","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"src/utils/input-validation.ts","start_line":144,"end_line":144,"start_column":12,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/22/instances","dismissal_approved_by":null},{"number":21,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/21","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/21","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <iframe, which may cause an HTML element injection vulnerability."},"location":{"path":"src/utils/input-validation.ts","start_line":144,"end_line":145,"start_column":12,"end_column":82},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/21/instances","dismissal_approved_by":null},{"number":20,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/20","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/20","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain on, which may cause an HTML attribute injection vulnerability."},"location":{"path":"src/utils/input-validation.ts","start_line":144,"end_line":149,"start_column":12,"end_column":46},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/20/instances","dismissal_approved_by":null},{"number":19,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/19","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/19","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain on, which may cause an HTML attribute injection vulnerability."},"location":{"path":"src/utils/htmlSanitizer.ts","start_line":39,"end_line":39,"start_column":15,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/19/instances","dismissal_approved_by":null},{"number":18,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/18","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/18","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain on, which may cause an HTML attribute injection vulnerability."},"location":{"path":"src/utils/htmlSanitizer.ts","start_line":38,"end_line":38,"start_column":15,"end_column":61},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/18/instances","dismissal_approved_by":null},{"number":17,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/17","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/17","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"src/utils/htmlSanitizer.ts","start_line":37,"end_line":37,"start_column":15,"end_column":91},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/17/instances","dismissal_approved_by":null},{"number":16,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/16","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/16","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain on, which may cause an HTML attribute injection vulnerability."},"location":{"path":"src/middleware/security-validation.ts","start_line":362,"end_line":366,"start_column":21,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/16/instances","dismissal_approved_by":null},{"number":15,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/15","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/15","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-multi-character-sanitization","severity":"warning","description":"Incomplete multi-character sanitization","name":"js/incomplete-multi-character-sanitization","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","security"],"full_description":"A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.","help":"# Incomplete multi-character sanitization\nSanitizing untrusted input is a common technique for preventing injection attacks and other security vulnerabilities. Regular expressions are often used to perform this sanitization. However, when the regular expression matches multiple consecutive characters, replacing it just once can result in the unsafe text reappearing in the sanitized input.\n\nAttackers can exploit this issue by crafting inputs that, when sanitized with an ineffective regular expression, still contain malicious code or content. This can lead to code execution, data exposure, or other vulnerabilities.\n\n\n## Recommendation\nTo prevent this issue, it is highly recommended to use a well-tested sanitization library whenever possible. These libraries are more likely to handle corner cases and ensure effective sanitization.\n\nIf a library is not an option, you can consider alternative strategies to fix the issue. For example, applying the regular expression replacement repeatedly until no more replacements can be performed, or rewriting the regular expression to match single characters instead of the entire unsafe text.\n\n\n## Example\nConsider the following JavaScript code that aims to remove all HTML comment start and end tags:\n\n```javascript\n\nstr.replace(/<!--|--!?>/g, \"\");   \n\n```\nGiven the input string \"&lt;!&lt;!--- comment ---&gt;&gt;\", the output will be \"&lt;!-- comment --&gt;\", which still contains an HTML comment.\n\nOne possible fix for this issue is to apply the regular expression replacement repeatedly until no more replacements can be performed. This ensures that the unsafe text does not re-appear in the sanitized input, effectively removing all instances of the targeted pattern:\n\n```javascript\n\nfunction removeHtmlComments(input) {  \n  let previous;  \n  do {  \n    previous = input;  \n    input = input.replace(/<!--|--!?>/g, \"\");  \n  } while (input !== previous);  \n  return input;  \n}  \n\n```\n\n## Example\nAnother example is the following regular expression intended to remove script tags:\n\n```javascript\n\nstr.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/g, \"\");  \n\n```\nIf the input string is \"&lt;scrip&lt;script&gt;is removed&lt;/script&gt;t&gt;alert(123)&lt;/script&gt;\", the output will be \"&lt;script&gt;alert(123)&lt;/script&gt;\", which still contains a script tag.\n\nA fix for this issue is to rewrite the regular expression to match single characters (\"&lt;\" and \"&gt;\") instead of the entire unsafe text. This simplifies the sanitization process and ensures that all potentially unsafe characters are removed:\n\n```javascript\n\nfunction removeAllHtmlTags(input) {  \n  return input.replace(/<|>/g, \"\");  \n}\n\n```\nAnother potential fix is to use the popular `sanitize-html` npm library. It keeps most of the safe HTML tags while removing all unsafe tags and attributes.\n\n```javascript\n\nconst sanitizeHtml = require(\"sanitize-html\");\nfunction removeAllHtmlTags(input) {  \n  return sanitizeHtml(input);  \n}\n\n```\n\n## Example\nLastly, consider a path sanitizer using the regular expression `/\\.\\.\\//`:\n\n```javascript\n\nstr.replace(/\\.\\.\\//g, \"\");  \n\n```\nThe regular expression attempts to strip out all occurences of `/../` from `str`. This will not work as expected: for the string `/./.././`, for example, it will remove the single occurrence of `/../` in the middle, but the remainder of the string then becomes `/../`, which is another instance of the substring we were trying to remove.\n\nA possible fix for this issue is to use the \"sanitize-filename\" npm library for path sanitization. This library is specifically designed to handle path sanitization, and should handle all corner cases and ensure effective sanitization:\n\n```javascript\n\nconst sanitize = require(\"sanitize-filename\");  \n  \nfunction sanitizePath(input) {  \n  return sanitize(input);  \n}  \n\n```\n\n## References\n* OWASP Top 10: [A1 Injection](https://www.owasp.org/index.php/Top_10-2017_A1-Injection).\n* Stack Overflow: [Removing all script tags from HTML with JS regular expression](https://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This string may still contain <script, which may cause an HTML element injection vulnerability."},"location":{"path":"src/middleware/security-validation.ts","start_line":14,"end_line":14,"start_column":47,"end_column":76},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/15/instances","dismissal_approved_by":null},{"number":14,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/14","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/14","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"src/utils/input-validation.ts","start_line":371,"end_line":371,"start_column":17,"end_column":66},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/14/instances","dismissal_approved_by":null},{"number":13,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/13","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/13","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"src/utils/input-validation.ts","start_line":144,"end_line":144,"start_column":25,"end_column":74},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/13/instances","dismissal_approved_by":null},{"number":12,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/12","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/12","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"src/utils/htmlSanitizer.ts","start_line":37,"end_line":37,"start_column":34,"end_column":83},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/12/instances","dismissal_approved_by":null},{"number":11,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/11","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/11","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/bad-tag-filter","severity":"warning","description":"Bad HTML filtering regexp","name":"js/bad-tag-filter","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-080","external/cwe/cwe-116","external/cwe/cwe-184","external/cwe/cwe-185","external/cwe/cwe-186","security"],"full_description":"Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.","help":"# Bad HTML filtering regexp\nIt is possible to match some single HTML tags using regular expressions (parsing general HTML using regular expressions is impossible). However, if the regular expression is not written well it might be possible to circumvent it, which can lead to cross-site scripting or other security issues.\n\nSome of these mistakes are caused by browsers having very forgiving HTML parsers, and will often render invalid HTML containing syntax errors. Regular expressions that attempt to match HTML should also recognize tags containing such syntax errors.\n\n\n## Recommendation\nUse a well-tested sanitization or parser library if at all possible. These libraries are much more likely to handle corner cases correctly than a custom implementation.\n\n\n## Example\nThe following example attempts to filters out all `<script>` tags.\n\n\n```javascript\nfunction filterScript(html) {\n    var scriptRegex = /<script\\b[^>]*>([\\s\\S]*?)<\\/script>/gi;\n    var match;\n    while ((match = scriptRegex.exec(html)) !== null) {\n        html = html.replace(match[0], match[1]);\n    }\n    return html;\n}\n\n```\nThe above sanitizer does not filter out all `<script>` tags. Browsers will not only accept `</script>` as script end tags, but also tags such as `</script foo=\"bar\">` even though it is a parser error. This means that an attack string such as `<script>alert(1)</script foo=\"bar\">` will not be filtered by the function, and `alert(1)` will be executed by a browser if the string is rendered as HTML.\n\nOther corner cases include that HTML comments can end with `--!>`, and that HTML tag names can contain upper case characters.\n\n\n## References\n* Securitum: [The Curious Case of Copy &amp; Paste](https://research.securitum.com/the-curious-case-of-copy-paste/).\n* stackoverflow.com: [You can't parse \\[X\\]HTML with regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags#answer-1732454).\n* HTML Standard: [Comment end bang state](https://html.spec.whatwg.org/multipage/parsing.html#comment-end-bang-state).\n* stackoverflow.com: [Why aren't browsers strict about HTML?](https://stackoverflow.com/questions/25559999/why-arent-browsers-strict-about-html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n* Common Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html).\n* Common Weakness Enumeration: [CWE-186](https://cwe.mitre.org/data/definitions/186.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This regular expression does not match script end tags like </script >."},"location":{"path":"src/middleware/security-validation.ts","start_line":38,"end_line":38,"start_column":6,"end_column":55},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/11/instances","dismissal_approved_by":null},{"number":10,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/10","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/10","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"'unsplash.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"src/pages/AdManagement.tsx","start_line":723,"end_line":723,"start_column":9,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/10/instances","dismissal_approved_by":null},{"number":9,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/9","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/9","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-substring-sanitization","severity":"warning","description":"Incomplete URL substring sanitization","name":"js/incomplete-url-substring-sanitization","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.","help":"# Incomplete URL substring sanitization\nSanitizing untrusted URLs is an important technique for preventing attacks such as request forgeries and malicious redirections. Usually, this is done by checking that the host of a URL is in a set of allowed hosts.\n\nHowever, treating the URL as a string and checking if one of the allowed hosts is a substring of the URL is very prone to errors. Malicious URLs can bypass such security checks by embedding one of the allowed hosts in an unexpected location.\n\nEven if the substring check is not used in a security-critical context, the incomplete check may still cause undesirable behaviors when the check succeeds accidentally.\n\n\n## Recommendation\nParse a URL before performing a check on its host value, and ensure that the check handles arbitrary subdomain sequences correctly.\n\n\n## Example\nThe following example code checks that a URL redirection will reach the `example.com` domain, or one of its subdomains, and not some malicious site.\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\");\n    // BAD: the host of `url` may be controlled by an attacker\n    if (url.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThe substring check is, however, easy to bypass. For example by embedding `example.com` in the path component: `http://evil-example.net/example.com`, or in the query string component: `http://evil-example.net/?x=example.com`. Address these shortcomings by checking the host of the parsed URL instead:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param(\"url\"),\n        host = urlLib.parse(url).host;\n    // BAD: the host of `url` may be controlled by an attacker\n    if (host.includes(\"example.com\")) {\n        res.redirect(url);\n    }\n});\n\n```\nThis is still not a sufficient check as the following URLs bypass it: `http://evil-example.com` `http://example.com.evil-example.net`. Instead, use an explicit whitelist of allowed hosts to make the redirect secure:\n\n\n```javascript\napp.get('/some/path', function(req, res) {\n    let url = req.param('url'),\n        host = urlLib.parse(url).host;\n    // GOOD: the host of `url` can not be controlled by an attacker\n    let allowedHosts = [\n        'example.com',\n        'beta.example.com',\n        'www.example.com'\n    ];\n    if (allowedHosts.includes(host)) {\n        res.redirect(url);\n    }\n});\n\n```\n\n## References\n* OWASP: [SSRF](https://www.owasp.org/index.php/Server_Side_Request_Forgery)\n* OWASP: [XSS Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"'unsplash.com' can be anywhere in the URL, and arbitrary hosts may come before or after it."},"location":{"path":"src/components/AdDisplay.tsx","start_line":360,"end_line":360,"start_column":9,"end_column":45},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/9/instances","dismissal_approved_by":null},{"number":8,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/8","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/8","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/overly-large-range","severity":"warning","description":"Overly permissive regular expression range","name":"js/overly-large-range","tags":["correctness","external/cwe/cwe-020","security"],"full_description":"Overly permissive regular expression ranges match a wider range of characters than intended. This may allow an attacker to bypass a filter or sanitizer.","help":"# Overly permissive regular expression range\nIt's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \\ ] ^ _ ` ``.\n\nAnother common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.\n\n\n## Recommendation\nAvoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.\n\n\n## Example\nThe following example code is intended to check whether a string is a valid 6 digit hex color.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9a-fA-f]{6}$/i.test(color);\n}\n\n```\nHowever, the `A-f` range is overly large and matches every uppercase character. It would parse a \"color\" like `#XXYYZZ` as valid.\n\nThe fix is to use an uppercase `A-F` range instead.\n\n```javascript\n\nfunction isValidHexColor(color) {\n    return /^#[0-9A-F]{6}$/i.test(color);\n}\n\n```\n\n## References\n* GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)\n* wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)\n* Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)\n* Paul Boyd: [The regex \\[,-.\\]](https://pboyd.io/posts/comma-dash-dot/)\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Suspicious character range that is equivalent to \\[.\\/0-9:\\]."},"location":{"path":"src/utils/htmlSanitizer.ts","start_line":21,"end_line":21,"start_column":74,"end_column":77},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/8/instances","dismissal_approved_by":null},{"number":7,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/7","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/7","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This check does not consider data:."},"location":{"path":"src/utils/htmlSanitizer.ts","start_line":41,"end_line":41,"start_column":15,"end_column":51},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/7/instances","dismissal_approved_by":null},{"number":6,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/6","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/6","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/incomplete-url-scheme-check","severity":"warning","description":"Incomplete URL scheme check","name":"js/incomplete-url-scheme-check","tags":["correctness","external/cwe/cwe-020","external/cwe/cwe-184","security"],"full_description":"Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\" and \"data:\" suggests a logic error or even a security vulnerability.","help":"# Incomplete URL scheme check\nURLs starting with `javascript:` can be used to encode JavaScript code to be executed when the URL is visited. While this is a powerful mechanism for creating feature-rich and responsive web applications, it is also a potential security risk: if the URL comes from an untrusted source, it might contain harmful JavaScript code. For this reason, many frameworks and libraries first check the URL scheme of any untrusted URL, and reject URLs with the `javascript:` scheme.\n\nHowever, the `data:` and `vbscript:` schemes can be used to represent executable code in a very similar way, so any validation logic that checks against `javascript:`, but not against `data:` and `vbscript:`, is likely to be insufficient.\n\n\n## Recommendation\nAdd checks covering both `data:` and `vbscript:`.\n\n\n## Example\nThe following function validates a (presumably untrusted) URL `url`. If it starts with `javascript:` (case-insensitive and potentially preceded by whitespace), the harmless placeholder URL `about:blank` is returned to prevent code injection; otherwise `url` itself is returned.\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\nWhile this check provides partial projection, it should be extended to cover `data:` and `vbscript:` as well:\n\n\n```javascript\nfunction sanitizeUrl(url) {\n    let u = decodeURI(url).trim().toLowerCase();\n    if (u.startsWith(\"javascript:\") || u.startsWith(\"data:\") || u.startsWith(\"vbscript:\"))\n        return \"about:blank\";\n    return url;\n}\n\n```\n\n## References\n* WHATWG: [URL schemes](https://wiki.whatwg.org/wiki/URL_schemes).\n* Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).\n* Common Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This check does not consider data:."},"location":{"path":"src/middleware/security-validation.ts","start_line":362,"end_line":366,"start_column":21,"end_column":34},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/6/instances","dismissal_approved_by":null},{"number":5,"created_at":"2025-08-14T15:10:46Z","updated_at":"2025-08-14T15:10:46Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/5","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/5","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/identity-replacement","severity":"warning","description":"Replacement of a substring with itself","name":"js/identity-replacement","tags":["correctness","external/cwe/cwe-116","security"],"full_description":"Replacing a substring with itself has no effect and may indicate a mistake.","help":"# Replacement of a substring with itself\nReplacing a substring with itself has no effect and usually indicates a mistake, such as misspelling a backslash escape.\n\n\n## Recommendation\nExamine the string replacement to find and correct any typos.\n\n\n## Example\nThe following code snippet attempts to backslash-escape all double quotes in `raw` by replacing all instances of `\"` with `\\\"`:\n\n\n```javascript\nvar escaped = raw.replace(/\"/g, '\\\"');\n\n```\nHowever, the replacement string `'\\\"'` is actually the same as `'\"'`, with `\\\"` interpreted as an identity escape, so the replacement does nothing. Instead, the replacement string should be `'\\\\\"'`:\n\n\n```javascript\nvar escaped = raw.replace(/\"/g, '\\\\\"');\n\n```\n\n## References\n* Mozilla Developer Network: [String escape notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Escape_notation).\n* Common Weakness Enumeration: [CWE-116](https://cwe.mitre.org/data/definitions/116.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.22.4"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:codeql-analysis","environment":"{\"language\":\"javascript\"}","category":"/language:javascript","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"This replaces 'A' with itself."},"location":{"path":"src/pages/CompleteProfile.tsx","start_line":419,"end_line":419,"start_column":117,"end_column":121},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/5/instances","dismissal_approved_by":null},{"number":1,"created_at":"2025-08-14T15:09:00Z","updated_at":"2025-08-14T15:09:00Z","url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/1","html_url":"https://github.com/jryan2014/car-audio-events/security/code-scanning/1","state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"jwt-token","severity":"warning","description":"JWT token","name":"Secret","tags":["MEDIUM","secret","security"],"full_description":"    -H \"Authorization: Bearer ***************************************************************************************************************************************************************************************************************************\"","help":"**Secret JWT token**\n| Severity | Match |\n| --- | --- |\n|MEDIUM|    -H \"Authorization: Bearer ***************************************************************************************************************************************************************************************************************************\"|","help_uri":"https://github.com/aquasecurity/trivy/blob/main/pkg/fanal/secret/builtin-rules.go","security_severity_level":"medium"},"tool":{"name":"Trivy","guid":null,"version":"0.64.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":".github/workflows/security.yml:trivy-scan","environment":"{}","category":"trivy","state":"open","commit_sha":"33501788555cba43fe8a1e101675499c3dd1e921","message":{"text":"Artifact: .github/workflows/trigger-supabase-email-queue.yml\nType: \nSecret JWT token\nSeverity: MEDIUM\nMatch:     -H \"Authorization: Bearer ***************************************************************************************************************************************************************************************************************************\""},"location":{"path":".github/workflows/trigger-supabase-email-queue.yml","start_line":16,"end_line":16,"start_column":1,"end_column":1},"classifications":[]},"instances_url":"https://api.github.com/repos/jryan2014/car-audio-events/code-scanning/alerts/1/instances","dismissal_approved_by":null}]