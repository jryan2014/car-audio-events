-- DATABASE SECURITY PHASE 4 - ENABLE RLS ON REMAINING TABLES
-- Enable Row Level Security on remaining unprotected tables
-- Risk Level: MEDIUM - Requires creating appropriate policies
-- Date: 2025-06-17

-- ============================================================================
-- PHASE 4: ENABLE RLS ON REMAINING 10 TABLES
-- ============================================================================

-- REMAINING UNPROTECTED TABLES (from security audit):
-- 1. admin_settings (CRITICAL)
-- 2. advertisement_analytics (HIGH)
-- 3. backup_configurations (HIGH)
-- 4. cms_pages (MEDIUM)
-- 5. contact_submissions (HIGH)
-- 6. directory_listings (MEDIUM)
-- 7. email_templates (MEDIUM)
-- 8. navigation_menu_items (LOW)
-- 9. organization_listings (MEDIUM)
-- 10. team_images (LOW)

-- Step 1: Show current RLS status of remaining tables
SELECT 
    'CURRENT RLS STATUS OF REMAINING TABLES:' as info,
    schemaname,
    tablename,
    CASE WHEN rowsecurity THEN 'ENABLED ‚úÖ' ELSE 'DISABLED ‚ùå' END as rls_status
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN (
    'admin_settings',
    'advertisement_analytics', 
    'backup_configurations',
    'cms_pages',
    'contact_submissions',
    'directory_listings',
    'email_templates',
    'navigation_menu_items',
    'organization_listings',
    'team_images'
)
ORDER BY tablename;

-- ============================================================================
-- SUB-PHASE 4A: LOW RISK TABLES FIRST
-- ============================================================================

-- Start with lowest risk tables (navigation_menu_items, team_images)
SELECT 'PHASE 4A: Enabling RLS on LOW RISK tables...' as action;

-- Enable RLS on navigation_menu_items
ALTER TABLE public.navigation_menu_items ENABLE ROW LEVEL SECURITY;

-- Create policy for navigation_menu_items (public read, admin write)
CREATE POLICY "Public read navigation" ON public.navigation_menu_items
FOR SELECT TO anon, authenticated
USING (true);

CREATE POLICY "Admin manage navigation" ON public.navigation_menu_items
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

-- Enable RLS on team_images  
ALTER TABLE public.team_images ENABLE ROW LEVEL SECURITY;

-- Create policy for team_images (public read, admin write)
CREATE POLICY "Public read team images" ON public.team_images
FOR SELECT TO anon, authenticated
USING (true);

CREATE POLICY "Admin manage team images" ON public.team_images
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

SELECT 'LOW RISK tables secured: navigation_menu_items, team_images' as status;

-- ============================================================================
-- SUB-PHASE 4B: MEDIUM RISK TABLES
-- ============================================================================

SELECT 'PHASE 4B: Enabling RLS on MEDIUM RISK tables...' as action;

-- Enable RLS on cms_pages
ALTER TABLE public.cms_pages ENABLE ROW LEVEL SECURITY;

-- Create policy for cms_pages (public read, admin write)
CREATE POLICY "Public read cms pages" ON public.cms_pages
FOR SELECT TO anon, authenticated
USING (true);

CREATE POLICY "Admin manage cms pages" ON public.cms_pages
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

-- Enable RLS on directory_listings
ALTER TABLE public.directory_listings ENABLE ROW LEVEL SECURITY;

-- Create policy for directory_listings (public read, owner/admin write)
CREATE POLICY "Public read directory listings" ON public.directory_listings
FOR SELECT TO anon, authenticated
USING (true);

CREATE POLICY "Owner manage directory listings" ON public.directory_listings
FOR ALL TO authenticated
USING (auth.uid() = user_id OR auth.email() = 'admin@caraudioevents.com');

-- Enable RLS on organization_listings
ALTER TABLE public.organization_listings ENABLE ROW LEVEL SECURITY;

-- Create policy for organization_listings (public read, owner/admin write)
CREATE POLICY "Public read organization listings" ON public.organization_listings
FOR SELECT TO anon, authenticated
USING (true);

CREATE POLICY "Owner manage organization listings" ON public.organization_listings
FOR ALL TO authenticated
USING (auth.uid() = user_id OR auth.email() = 'admin@caraudioevents.com');

-- Enable RLS on email_templates
ALTER TABLE public.email_templates ENABLE ROW LEVEL SECURITY;

-- Create policy for email_templates (admin only)
CREATE POLICY "Admin only email templates" ON public.email_templates
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

SELECT 'MEDIUM RISK tables secured: cms_pages, directory_listings, organization_listings, email_templates' as status;

-- ============================================================================
-- SUB-PHASE 4C: HIGH RISK TABLES
-- ============================================================================

SELECT 'PHASE 4C: Enabling RLS on HIGH RISK tables...' as action;

-- Enable RLS on contact_submissions
ALTER TABLE public.contact_submissions ENABLE ROW LEVEL SECURITY;

-- Create policy for contact_submissions (admin only)
CREATE POLICY "Admin only contact submissions" ON public.contact_submissions
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

-- Enable RLS on advertisement_analytics
ALTER TABLE public.advertisement_analytics ENABLE ROW LEVEL SECURITY;

-- Create policy for advertisement_analytics (admin only)
CREATE POLICY "Admin only ad analytics" ON public.advertisement_analytics
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

-- Enable RLS on backup_configurations
ALTER TABLE public.backup_configurations ENABLE ROW LEVEL SECURITY;

-- Create policy for backup_configurations (admin only)
CREATE POLICY "Admin only backup configs" ON public.backup_configurations
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

SELECT 'HIGH RISK tables secured: contact_submissions, advertisement_analytics, backup_configurations' as status;

-- ============================================================================
-- SUB-PHASE 4D: CRITICAL TABLE (admin_settings)
-- ============================================================================

SELECT 'PHASE 4D: Enabling RLS on CRITICAL table (admin_settings)...' as action;

-- Enable RLS on admin_settings (MOST CRITICAL)
ALTER TABLE public.admin_settings ENABLE ROW LEVEL SECURITY;

-- Create policy for admin_settings (admin only - STRICT)
CREATE POLICY "Admin only settings" ON public.admin_settings
FOR ALL TO authenticated
USING (auth.email() = 'admin@caraudioevents.com');

SELECT 'CRITICAL table secured: admin_settings' as status;

-- ============================================================================
-- PHASE 4 COMPLETION VERIFICATION
-- ============================================================================

-- Final verification - all tables should now have RLS enabled
SELECT 
    'FINAL RLS STATUS - ALL TABLES:' as info,
    tablename,
    CASE WHEN rowsecurity THEN 'ENABLED ‚úÖ' ELSE 'DISABLED ‚ùå' END as rls_status,
    (SELECT COUNT(*) FROM pg_policies WHERE schemaname = 'public' AND tablename = t.tablename) as policy_count
FROM pg_tables t
WHERE schemaname = 'public' 
AND tablename IN (
    'admin_settings',
    'advertisement_analytics',
    'backup_configurations', 
    'cms_pages',
    'contact_submissions',
    'directory_listings',
    'email_templates',
    'navigation_menu_items',
    'organization_listings',
    'team_images'
)
ORDER BY tablename;

-- Check for any remaining unprotected tables
SELECT 
    CASE 
        WHEN COUNT(*) = 0 THEN '‚úÖ PHASE 4 COMPLETE - All remaining tables now have RLS enabled!'
        ELSE '‚ö†Ô∏è ' || COUNT(*) || ' tables still need RLS enabled'
    END as phase4_status
FROM pg_tables t
WHERE schemaname = 'public' 
AND tablename IN (
    'admin_settings', 'advertisement_analytics', 'backup_configurations',
    'cms_pages', 'contact_submissions', 'directory_listings',
    'email_templates', 'navigation_menu_items', 'organization_listings', 'team_images'
)
AND rowsecurity = false;

-- ============================================================================
-- COMPLETE DATABASE SECURITY AUDIT SUMMARY
-- ============================================================================

SELECT 
    'üéâ DATABASE SECURITY AUDIT COMPLETED!' as final_status,
    'All 4 phases completed - database is now fully secured' as achievement;

-- Summary of all phases completed
SELECT 
    'PHASE 1: Function search_path fixes' as phase,
    'COMPLETED ‚úÖ' as status
UNION ALL
SELECT 
    'PHASE 2: RLS enabled on critical tables (5 tables)',
    'COMPLETED ‚úÖ'
UNION ALL
SELECT 
    'PHASE 3: Security Definer views removed',
    'COMPLETED ‚úÖ'
UNION ALL
SELECT 
    'PHASE 4: RLS enabled on remaining tables (10 tables)',
    'COMPLETED ‚úÖ';

-- ============================================================================
-- TESTING CHECKLIST AFTER PHASE 4
-- ============================================================================

/*
REQUIRED TESTING AFTER PHASE 4:

1. ‚úÖ Admin login and dashboard access
2. ‚úÖ CMS page viewing and editing
3. ‚úÖ Directory listings display
4. ‚úÖ Contact form submissions
5. ‚úÖ Navigation menu displays
6. ‚úÖ Organization listings work
7. ‚úÖ Email functionality
8. ‚úÖ No console errors
9. ‚úÖ Admin settings accessible
10. ‚úÖ All admin functions work

ROLLBACK IF NEEDED:
- Disable RLS on any table that breaks: ALTER TABLE [table] DISABLE ROW LEVEL SECURITY;
- Investigate policy issues and re-enable properly
*/ 