-- Tiered Permission System Migration
-- Creates a comprehensive permission system for granular feature access control

-- =====================================================
-- TIER CONFIGURATION TABLES
-- =====================================================

-- Tier definitions (Basic, Pro, Premium, etc.)
CREATE TABLE permission_tiers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE,
    display_name VARCHAR(150) NOT NULL,
    description TEXT,
    priority_level INTEGER NOT NULL DEFAULT 0, -- Higher number = higher tier
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Features in the system (SPL Calculator, Subwoofer Designer, etc.)
CREATE TABLE features (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE,
    display_name VARCHAR(150) NOT NULL,
    description TEXT,
    category VARCHAR(100), -- 'calculator', 'support', 'advertising', etc.
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Sub-features within each feature (advanced calculations, design optimization, etc.)
CREATE TABLE sub_features (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    feature_id UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    name VARCHAR(100) NOT NULL,
    display_name VARCHAR(150) NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(feature_id, name)
);

-- Actions that can be performed on features/sub-features
CREATE TABLE permission_actions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL UNIQUE, -- 'view', 'create', 'edit', 'delete', 'advanced_calculate', etc.
    display_name VARCHAR(150) NOT NULL,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- PERMISSION CONFIGURATION TABLES
-- =====================================================

-- Tier-based permissions for features
CREATE TABLE tier_feature_permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tier_id UUID NOT NULL REFERENCES permission_tiers(id) ON DELETE CASCADE,
    feature_id UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    action_id UUID NOT NULL REFERENCES permission_actions(id) ON DELETE CASCADE,
    is_granted BOOLEAN DEFAULT TRUE,
    conditions JSONB, -- Additional conditions (usage limits, time restrictions, etc.)
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(tier_id, feature_id, action_id)
);

-- Tier-based permissions for sub-features
CREATE TABLE tier_sub_feature_permissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tier_id UUID NOT NULL REFERENCES permission_tiers(id) ON DELETE CASCADE,
    sub_feature_id UUID NOT NULL REFERENCES sub_features(id) ON DELETE CASCADE,
    action_id UUID NOT NULL REFERENCES permission_actions(id) ON DELETE CASCADE,
    is_granted BOOLEAN DEFAULT TRUE,
    conditions JSONB, -- Usage limits, restrictions, etc.
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(tier_id, sub_feature_id, action_id)
);

-- =====================================================
-- USER PERMISSION ASSIGNMENT TABLES
-- =====================================================

-- User tier assignments (users can have different tiers for different features)
CREATE TABLE user_tier_assignments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    feature_id UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    tier_id UUID NOT NULL REFERENCES permission_tiers(id) ON DELETE CASCADE,
    assigned_by UUID REFERENCES auth.users(id), -- Admin who assigned this tier
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE, -- Optional expiration
    is_active BOOLEAN DEFAULT TRUE,
    notes TEXT,
    UNIQUE(user_id, feature_id)
);

-- Organization-specific permissions (for organization members)
CREATE TABLE organization_tier_assignments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id INTEGER NOT NULL, -- References organizations table
    feature_id UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    tier_id UUID NOT NULL REFERENCES permission_tiers(id) ON DELETE CASCADE,
    assigned_by UUID REFERENCES auth.users(id),
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE,
    notes TEXT,
    UNIQUE(organization_id, feature_id)
);

-- =====================================================
-- MEMBERSHIP PLAN INTEGRATION
-- =====================================================

-- Link membership plans to default tiers
CREATE TABLE membership_plan_tier_defaults (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    membership_type VARCHAR(50) NOT NULL, -- 'competitor', 'pro_competitor', etc.
    feature_id UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    tier_id UUID NOT NULL REFERENCES permission_tiers(id) ON DELETE CASCADE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(membership_type, feature_id)
);

-- =====================================================
-- USAGE TRACKING TABLES
-- =====================================================

-- Track feature usage for billing and analytics
CREATE TABLE feature_usage_tracking (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    feature_id UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    sub_feature_id UUID REFERENCES sub_features(id) ON DELETE CASCADE,
    action_id UUID NOT NULL REFERENCES permission_actions(id) ON DELETE CASCADE,
    usage_count INTEGER DEFAULT 1,
    usage_data JSONB, -- Store calculation results, file sizes, etc.
    usage_date DATE DEFAULT CURRENT_DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    INDEX (user_id, usage_date),
    INDEX (feature_id, usage_date)
);

-- Monthly usage summaries for performance
CREATE TABLE monthly_feature_usage (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    feature_id UUID NOT NULL REFERENCES features(id) ON DELETE CASCADE,
    year_month DATE NOT NULL, -- First day of month
    total_usage INTEGER DEFAULT 0,
    unique_actions INTEGER DEFAULT 0,
    usage_data JSONB, -- Aggregated metrics
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, feature_id, year_month)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Core permission checking indexes
CREATE INDEX idx_user_tier_assignments_user_feature ON user_tier_assignments(user_id, feature_id) WHERE is_active = TRUE;
CREATE INDEX idx_org_tier_assignments_org_feature ON organization_tier_assignments(organization_id, feature_id) WHERE is_active = TRUE;
CREATE INDEX idx_tier_feature_perms_lookup ON tier_feature_permissions(tier_id, feature_id, action_id) WHERE is_granted = TRUE;
CREATE INDEX idx_tier_sub_feature_perms_lookup ON tier_sub_feature_permissions(tier_id, sub_feature_id, action_id) WHERE is_granted = TRUE;

-- Usage tracking indexes
CREATE INDEX idx_feature_usage_user_date ON feature_usage_tracking(user_id, usage_date);
CREATE INDEX idx_feature_usage_feature_date ON feature_usage_tracking(feature_id, usage_date);
CREATE INDEX idx_monthly_usage_lookup ON monthly_feature_usage(user_id, feature_id, year_month);

-- Admin management indexes
CREATE INDEX idx_features_category ON features(category) WHERE is_active = TRUE;
CREATE INDEX idx_sub_features_feature ON sub_features(feature_id) WHERE is_active = TRUE;

-- =====================================================
-- RLS POLICIES
-- =====================================================

-- Enable RLS on all tables
ALTER TABLE permission_tiers ENABLE ROW LEVEL SECURITY;
ALTER TABLE features ENABLE ROW LEVEL SECURITY;
ALTER TABLE sub_features ENABLE ROW LEVEL SECURITY;
ALTER TABLE permission_actions ENABLE ROW LEVEL SECURITY;
ALTER TABLE tier_feature_permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE tier_sub_feature_permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_tier_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE organization_tier_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE membership_plan_tier_defaults ENABLE ROW LEVEL SECURITY;
ALTER TABLE feature_usage_tracking ENABLE ROW LEVEL SECURITY;
ALTER TABLE monthly_feature_usage ENABLE ROW LEVEL SECURITY;

-- Configuration tables - Admin only
CREATE POLICY "Admins can manage permission tiers" ON permission_tiers FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

CREATE POLICY "Everyone can view active tiers" ON permission_tiers FOR SELECT USING (is_active = TRUE);

CREATE POLICY "Admins can manage features" ON features FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

CREATE POLICY "Everyone can view active features" ON features FOR SELECT USING (is_active = TRUE);

CREATE POLICY "Admins can manage sub_features" ON sub_features FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

CREATE POLICY "Everyone can view active sub_features" ON sub_features FOR SELECT USING (is_active = TRUE);

CREATE POLICY "Admins can manage permission actions" ON permission_actions FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

CREATE POLICY "Everyone can view active actions" ON permission_actions FOR SELECT USING (is_active = TRUE);

-- Permission configuration - Admin only
CREATE POLICY "Admins manage tier feature permissions" ON tier_feature_permissions FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

CREATE POLICY "Admins manage tier sub-feature permissions" ON tier_sub_feature_permissions FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

CREATE POLICY "Admins manage membership plan defaults" ON membership_plan_tier_defaults FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

-- User assignments - Users can view their own, admins can manage all
CREATE POLICY "Users view own tier assignments" ON user_tier_assignments FOR SELECT USING (
    user_id = (SELECT auth.uid()) AND is_active = TRUE
);

CREATE POLICY "Admins manage all tier assignments" ON user_tier_assignments FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

-- Organization assignments - Organization members and admins
CREATE POLICY "Org members view org assignments" ON organization_tier_assignments FOR SELECT USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND organization_id = organization_tier_assignments.organization_id)
    AND is_active = TRUE
);

CREATE POLICY "Admins manage org assignments" ON organization_tier_assignments FOR ALL USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

-- Usage tracking - Users can view their own, admins can view all
CREATE POLICY "Users view own usage" ON feature_usage_tracking FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "System can insert usage" ON feature_usage_tracking FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Admins view all usage" ON feature_usage_tracking FOR SELECT USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

CREATE POLICY "Users view own monthly usage" ON monthly_feature_usage FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Admins view all monthly usage" ON monthly_feature_usage FOR SELECT USING (
    EXISTS (SELECT 1 FROM users WHERE id = (SELECT auth.uid()) AND membership_type = 'admin')
);

-- =====================================================
-- TRIGGERS FOR AUTOMATED MAINTENANCE
-- =====================================================

-- Update timestamp triggers
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_permission_tiers_updated_at BEFORE UPDATE ON permission_tiers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_features_updated_at BEFORE UPDATE ON features FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_sub_features_updated_at BEFORE UPDATE ON sub_features FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tier_feature_permissions_updated_at BEFORE UPDATE ON tier_feature_permissions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tier_sub_feature_permissions_updated_at BEFORE UPDATE ON tier_sub_feature_permissions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_monthly_feature_usage_updated_at BEFORE UPDATE ON monthly_feature_usage FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- SEED DATA FOR BASIC CONFIGURATION
-- =====================================================

-- Insert permission tiers
INSERT INTO permission_tiers (name, display_name, description, priority_level) VALUES
('public', 'Public', 'Basic access for non-registered users', 0),
('basic', 'Basic', 'Basic registered user access', 10),
('free_competitor', 'Free Competitor', 'Free competitor features', 20),
('pro_competitor', 'Pro Competitor', 'Enhanced competitor features', 30),
('business', 'Business', 'Business tier features', 40),
('organization', 'Organization', 'Organization-specific features', 50),
('admin', 'Administrator', 'Full administrative access', 100);

-- Insert features
INSERT INTO features (name, display_name, description, category) VALUES
('spl_calculator', 'SPL Calculator', 'Sound Pressure Level calculation tools', 'calculator'),
('subwoofer_designer', 'Subwoofer Designer', '3D subwoofer box design and optimization', 'design'),
('support_desk', 'Support Desk', 'Customer support ticketing system', 'support'),
('advertisement_system', 'Advertisement System', 'Create and manage advertisements', 'advertising'),
('team_management', 'Team Management', 'Create and manage competition teams', 'teams'),
('event_management', 'Event Management', 'Create and manage events', 'events'),
('analytics', 'Analytics', 'View usage and performance analytics', 'analytics'),
('api_access', 'API Access', 'Programmatic access to platform features', 'integration');

-- Insert permission actions
INSERT INTO permission_actions (name, display_name, description) VALUES
('view', 'View', 'View and access basic functionality'),
('create', 'Create', 'Create new items or content'),
('edit', 'Edit', 'Modify existing content'),
('delete', 'Delete', 'Remove content'),
('advanced_calculate', 'Advanced Calculate', 'Access to advanced calculation features'),
('export', 'Export', 'Export data and results'),
('import', 'Import', 'Import data from external sources'),
('manage', 'Manage', 'Full management capabilities'),
('analyze', 'Analyze', 'Access to analytics and reporting'),
('unlimited_usage', 'Unlimited Usage', 'No usage limits or restrictions');

-- Insert sub-features for SPL Calculator
INSERT INTO sub_features (feature_id, name, display_name, description) VALUES
((SELECT id FROM features WHERE name = 'spl_calculator'), 'basic_calculations', 'Basic Calculations', 'Standard SPL calculations'),
((SELECT id FROM features WHERE name = 'spl_calculator'), 'advanced_modeling', 'Advanced Modeling', 'Complex acoustic modeling and simulations'),
((SELECT id FROM features WHERE name = 'spl_calculator'), 'frequency_analysis', 'Frequency Analysis', 'Detailed frequency response analysis'),
((SELECT id FROM features WHERE name = 'spl_calculator'), 'optimization', 'System Optimization', 'Automated system optimization suggestions'),
((SELECT id FROM features WHERE name = 'spl_calculator'), 'historical_tracking', 'Historical Tracking', 'Track and compare calculations over time');

-- Insert sub-features for Subwoofer Designer
INSERT INTO sub_features (feature_id, name, display_name, description) VALUES
((SELECT id FROM features WHERE name = 'subwoofer_designer'), 'basic_design', 'Basic Design', 'Basic box design with standard calculations'),
((SELECT id FROM features WHERE name = 'subwoofer_designer'), 'database_access', 'Subwoofer Database', 'Access to comprehensive subwoofer specifications'),
((SELECT id FROM features WHERE name = 'subwoofer_designer'), '3d_visualization', '3D Visualization', '3D rendering and visualization tools'),
((SELECT id FROM features WHERE name = 'subwoofer_designer'), 'optimization_tools', 'Optimization Tools', 'Advanced design optimization algorithms'),
((SELECT id FROM features WHERE name = 'subwoofer_designer'), 'material_calculator', 'Material Calculator', 'Calculate materials and costs');

-- Insert sub-features for Support Desk
INSERT INTO sub_features (feature_id, name, display_name, description) VALUES
((SELECT id FROM features WHERE name = 'support_desk'), 'create_tickets', 'Create Tickets', 'Submit support tickets'),
((SELECT id FROM features WHERE name = 'support_desk'), 'priority_support', 'Priority Support', 'Higher priority ticket handling'),
((SELECT id FROM features WHERE name = 'support_desk'), 'organization_queue', 'Organization Queue', 'Dedicated organization support queue'),
((SELECT id FROM features WHERE name = 'support_desk'), 'custom_integration', 'Custom Integration', 'Custom support desk integration for organizations');

-- Insert sub-features for Advertisement System
INSERT INTO sub_features (feature_id, name, display_name, description) VALUES
((SELECT id FROM features WHERE name = 'advertisement_system'), 'product_ads', 'Product Advertisements', 'Create product-focused advertisements'),
((SELECT id FROM features WHERE name = 'advertisement_system'), 'brand_ads', 'Brand Advertisements', 'Create brand-focused advertisements'),
((SELECT id FROM features WHERE name = 'advertisement_system'), 'event_ads', 'Event Advertisements', 'Create event and promotion advertisements'),
((SELECT id FROM features WHERE name = 'advertisement_system'), 'ai_creation', 'AI Ad Creation', 'AI-powered advertisement creation tools'),
((SELECT id FROM features WHERE name = 'advertisement_system'), 'analytics', 'Ad Analytics', 'Detailed advertisement performance analytics');

-- Insert sub-features for Team Management
INSERT INTO sub_features (feature_id, name, display_name, description) VALUES
((SELECT id FROM features WHERE name = 'team_management'), 'join_teams', 'Join Teams', 'Join existing teams'),
((SELECT id FROM features WHERE name = 'team_management'), 'create_teams', 'Create Teams', 'Create and manage new teams'),
((SELECT id FROM features WHERE name = 'team_management'), 'multiple_teams', 'Multiple Teams', 'Manage multiple teams simultaneously'),
((SELECT id FROM features WHERE name = 'team_management'), 'team_analytics', 'Team Analytics', 'View detailed team performance analytics');

-- This migration continues in the next part due to size limits...